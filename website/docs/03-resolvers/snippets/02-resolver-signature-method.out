/** @gqlType */
class User {
  _bestFriendID: number;
  /** @gqlField */
  bestFriend(args: { order: string }, context: GqlContext): User {
    return context.db.getSortedFriends(this._bestFriendID, args.order);
  }
}

/** @gqlContext */
type GqlContext = {
  db: { getSortedFriends(id: number, order: string): User };
};

=== SNIP ===
type User {
  bestFriend(order: String!): User
}
=== SNIP ===
import { GraphQLSchema, GraphQLObjectType, GraphQLNonNull, GraphQLString } from "graphql";
export function getSchema(): GraphQLSchema {
    const UserType: GraphQLObjectType = new GraphQLObjectType({
        name: "User",
        fields() {
            return {
                bestFriend: {
                    name: "bestFriend",
                    type: UserType,
                    args: {
                        order: {
                            name: "order",
                            type: new GraphQLNonNull(GraphQLString)
                        }
                    }
                }
            };
        }
    });
    return new GraphQLSchema({
        types: [UserType]
    });
}
