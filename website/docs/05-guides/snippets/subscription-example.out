import { Int } from "grats";

/** @gqlType */
type Subscription = unknown;

/** @gqlField */
export async function* countdown(_: Subscription): AsyncIterable<Int> {
  for (let i = 10; i >= 0; i--) {
    await sleep(1);
    yield i;
  }
}

function sleep(s: number) {
  return new Promise((resolve) => setTimeout(resolve, s * 1000));
}

=== SNIP ===
type Subscription {
  countdown: Int
}
=== SNIP ===
import { countdown as subscriptionCountdownResolver } from "./subscription-example.grats";
import { GraphQLSchema, GraphQLObjectType, GraphQLInt } from "graphql";
export function getSchema(): GraphQLSchema {
    const SubscriptionType: GraphQLObjectType = new GraphQLObjectType({
        name: "Subscription",
        fields() {
            return {
                countdown: {
                    name: "countdown",
                    type: GraphQLInt,
                    subscribe(source) {
                        return subscriptionCountdownResolver(source);
                    },
                    resolve(payload) {
                        return payload;
                    }
                }
            };
        }
    });
    return new GraphQLSchema({
        subscription: SubscriptionType,
        types: [SubscriptionType]
    });
}
