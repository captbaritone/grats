import express from "express";
import { graphqlHTTP } from "express-graphql";
import { getSchema } from "./schema"; // Generated by Grats

// Maps id to User object
var fakeDatabase = {
  a: { id: "a", name: "alice" },
  b: { id: "b", name: "bob" },
};

/** @gqlType */
type User = {
  /** @gqlField */
  id: string;
  /** @gqlField */
  name: string;
};

/** @gqlType */
type Query = unknown;

/** @gqlField */
export function user(_: Query, args: { id: string }): User {
  return fakeDatabase[args.id];
}

var app = express();
app.use(
  "/graphql",
  graphqlHTTP({
    schema: getSchema(),
    graphiql: true,
  }),
);
app.listen(4000);
console.log("Running a GraphQL API server at localhost:4000/graphql");

=== SNIP ===
type Query {
  user(id: String!): User
}

type User {
  id: String
  name: String
}
=== SNIP ===
import { user as queryUserResolver } from "./graphql-js.grats";
import { GraphQLSchema, GraphQLObjectType, GraphQLString, GraphQLNonNull } from "graphql";
export function getSchema(): GraphQLSchema {
    const UserType: GraphQLObjectType = new GraphQLObjectType({
        name: "User",
        fields() {
            return {
                id: {
                    name: "id",
                    type: GraphQLString
                },
                name: {
                    name: "name",
                    type: GraphQLString
                }
            };
        }
    });
    const QueryType: GraphQLObjectType = new GraphQLObjectType({
        name: "Query",
        fields() {
            return {
                user: {
                    name: "user",
                    type: UserType,
                    args: {
                        id: {
                            name: "id",
                            type: new GraphQLNonNull(GraphQLString)
                        }
                    },
                    resolve(source, args) {
                        return queryUserResolver(source, args);
                    }
                }
            };
        }
    });
    return new GraphQLSchema({
        query: QueryType,
        types: [QueryType, UserType]
    });
}
