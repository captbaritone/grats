import { createYoga } from "graphql-yoga";
import { createServer } from "node:http";
import { getSchema } from "./schema"; // Generated by Grats

/** @gqlType */
type Query = unknown;

/** @gqlField */
export function hello(_: Query, args: { name?: string | null }): string {
  return `hello, ${args.name || "World"}`;
}

const yoga = createYoga({
  schema: getSchema(),
});

const server = createServer(yoga);

server.listen(3000, () => {
  console.log("Visit http://localhost:3000/graphql");
});

=== SNIP ===
type Query {
  hello(name: String): String
}
=== SNIP ===
import { hello as queryHelloResolver } from "./pothos.grats";
import { GraphQLSchema, GraphQLObjectType, GraphQLString } from "graphql";
export function getSchema(): GraphQLSchema {
    const QueryType: GraphQLObjectType = new GraphQLObjectType({
        name: "Query",
        fields() {
            return {
                hello: {
                    name: "hello",
                    type: GraphQLString,
                    args: {
                        name: {
                            name: "name",
                            type: GraphQLString
                        }
                    },
                    resolve(source, args) {
                        return queryHelloResolver(source, args);
                    }
                }
            };
        }
    });
    return new GraphQLSchema({
        query: QueryType,
        types: [QueryType]
    });
}
