import { ID } from "grats";
import { getSchema } from "./schema"; // Generated by Grats

/**
 * A user role
 * @gqlEnum
 */
enum Role {
  Admin = "Admin",
  User = "User",
}

/** @gqlType */
type User = {
  /** @gqlField */
  id: ID;
  /** @gqlField */
  role: Role;
  /** @gqlField */
  name: string;
};

const users: User[] = [
  { id: "1", role: Role.Admin, name: "Sikan" },
  { id: "2", role: Role.User, name: "Nicole" },
];

interface GqlContext {
  viewerId: number;
  users: User[];
}

/** @gqlType */
type Query = unknown;

/** @gqlField */
export function userById(
  _: Query,
  args: { id: string },
  ctx: GqlContext,
): User | null {
  return users.find((u) => u.id === args.id) || null;
}

const schema = getSchema();

=== SNIP ===
"""A user role"""
enum Role {
  Admin
  User
}

type Query {
  userById(id: String!): User
}

type User {
  id: ID
  name: String
  role: Role
}
=== SNIP ===
import { userById as queryUserByIdResolver } from "./gqtx.grats";
import { GraphQLSchema, GraphQLObjectType, GraphQLID, GraphQLString, GraphQLEnumType, GraphQLNonNull } from "graphql";
export function getSchema(): GraphQLSchema {
    const RoleType: GraphQLEnumType = new GraphQLEnumType({
        description: "A user role",
        name: "Role",
        values: {
            Admin: {
                value: "Admin"
            },
            User: {
                value: "User"
            }
        }
    });
    const UserType: GraphQLObjectType = new GraphQLObjectType({
        name: "User",
        fields() {
            return {
                id: {
                    name: "id",
                    type: GraphQLID
                },
                name: {
                    name: "name",
                    type: GraphQLString
                },
                role: {
                    name: "role",
                    type: RoleType
                }
            };
        }
    });
    const QueryType: GraphQLObjectType = new GraphQLObjectType({
        name: "Query",
        fields() {
            return {
                userById: {
                    name: "userById",
                    type: UserType,
                    args: {
                        id: {
                            name: "id",
                            type: new GraphQLNonNull(GraphQLString)
                        }
                    },
                    resolve(source, args, context) {
                        return queryUserByIdResolver(source, args, context);
                    }
                }
            };
        }
    });
    return new GraphQLSchema({
        query: QueryType,
        types: [RoleType, QueryType, UserType]
    });
}
