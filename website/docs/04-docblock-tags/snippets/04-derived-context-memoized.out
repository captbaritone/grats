// trim-start
class DB {
  selectUser(): { name: string } {
    return { name: "Alice" };
  }
}

// trim-end
/** @gqlContext */
type Ctx = {};

// A derived context resolver cached using a WeakMap to ensure the value is
// computed at most once per request.

const DB_CACHE = new WeakMap<Ctx, DB>();

// highlight-start
/** @gqlContext */
export function getDb(ctx: Ctx): DB {
  if (!DB_CACHE.has(ctx)) {
    DB_CACHE.set(ctx, new DB());
  }
  return DB_CACHE.get(ctx)!;
}
// highlight-end

/**
 * @gqlQueryField */
export function me(db: DB): string {
  return db.selectUser().name;
}

=== SNIP ===
type Query {
  me: String
}
=== SNIP ===
import { me as queryMeResolver, getDb } from "./04-derived-context-memoized.grats";
import { GraphQLSchema, GraphQLObjectType, GraphQLString } from "graphql";
export function getSchema(): GraphQLSchema {
    const QueryType: GraphQLObjectType = new GraphQLObjectType({
        name: "Query",
        fields() {
            return {
                me: {
                    name: "me",
                    type: GraphQLString,
                    resolve(_source, _args, context) {
                        return queryMeResolver(getDb(context));
                    }
                }
            };
        }
    });
    return new GraphQLSchema({
        query: QueryType,
        types: [QueryType]
    });
}
