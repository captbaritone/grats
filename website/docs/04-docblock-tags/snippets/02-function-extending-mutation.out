// trim-start
const DB: any = {};

/** @gqlType */
type User = {
  /** @gqlField */
  name: string;
};

// trim-end
/** @gqlMutationField */
export function deleteUser(id: string): boolean {
  return DB.deleteUser(id);
}

=== SNIP ===
type Mutation {
  deleteUser(id: String!): Boolean
}

type User {
  name: String
}
=== SNIP ===
import { deleteUser as mutationDeleteUserResolver } from "./02-function-extending-mutation.grats";
import { GraphQLSchema, GraphQLObjectType, GraphQLBoolean, GraphQLNonNull, GraphQLString } from "graphql";
export function getSchema(): GraphQLSchema {
    const MutationType: GraphQLObjectType = new GraphQLObjectType({
        name: "Mutation",
        fields() {
            return {
                deleteUser: {
                    name: "deleteUser",
                    type: GraphQLBoolean,
                    args: {
                        id: {
                            name: "id",
                            type: new GraphQLNonNull(GraphQLString)
                        }
                    },
                    resolve(source, args) {
                        return mutationDeleteUserResolver(args.id);
                    }
                }
            };
        }
    });
    const UserType: GraphQLObjectType = new GraphQLObjectType({
        name: "User",
        fields() {
            return {
                name: {
                    name: "name",
                    type: GraphQLString
                }
            };
        }
    });
    return new GraphQLSchema({
        mutation: MutationType,
        types: [MutationType, UserType]
    });
}
