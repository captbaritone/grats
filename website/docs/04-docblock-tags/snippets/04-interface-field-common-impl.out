/** @gqlInterface */
interface Greetable {
  /** @gqlField */
  name: string;
}

// highlight-start
/** @gqlField */
export function greeting(thing: Greetable): string {
  return `Hello ${thing.name}!`;
}
// highlight-end

// trim-start
/** @gqlType */
class User implements Greetable {
  __typename: "User";
  /** @gqlField */
  name: string;
}

/** @gqlType */
class Pet implements Greetable {
  __typename: "Pet";
  /** @gqlField */
  name: string;
}
// trim-end

=== SNIP ===
interface Greetable {
  greeting: String
  name: String
}

type Pet implements Greetable {
  greeting: String
  name: String
}

type User implements Greetable {
  greeting: String
  name: String
}
=== SNIP ===
import { GraphQLSchema, GraphQLInterfaceType, GraphQLString, GraphQLObjectType } from "graphql";
import { greeting as petGreetingResolver, greeting as userGreetingResolver } from "./04-interface-field-common-impl.grats";
export function getSchema(): GraphQLSchema {
    const GreetableType: GraphQLInterfaceType = new GraphQLInterfaceType({
        name: "Greetable",
        fields() {
            return {
                greeting: {
                    name: "greeting",
                    type: GraphQLString
                },
                name: {
                    name: "name",
                    type: GraphQLString
                }
            };
        }
    });
    const PetType: GraphQLObjectType = new GraphQLObjectType({
        name: "Pet",
        fields() {
            return {
                greeting: {
                    name: "greeting",
                    type: GraphQLString,
                    resolve(source) {
                        return petGreetingResolver(source);
                    }
                },
                name: {
                    name: "name",
                    type: GraphQLString
                }
            };
        },
        interfaces() {
            return [GreetableType];
        }
    });
    const UserType: GraphQLObjectType = new GraphQLObjectType({
        name: "User",
        fields() {
            return {
                greeting: {
                    name: "greeting",
                    type: GraphQLString,
                    resolve(source) {
                        return userGreetingResolver(source);
                    }
                },
                name: {
                    name: "name",
                    type: GraphQLString
                }
            };
        },
        interfaces() {
            return [GreetableType];
        }
    });
    return new GraphQLSchema({
        types: [GreetableType, PetType, UserType]
    });
}
