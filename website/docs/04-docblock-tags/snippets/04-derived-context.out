// trim-start
type DB = {
  selectUser(): { name: string };
  /*...*/
};

// trim-end
/** @gqlContext */
type Ctx = { db: DB };

// highlight-start
/** @gqlContext */
export function getDb(ctx: Ctx): DB {
  return ctx.db;
}
// highlight-end

/**
 * A field which reads a derived context. Grats will invoke the above `getDb`
 * function and pass it to this resolver function.
 *
 * @gqlQueryField */
export function me(db: DB): string {
  return db.selectUser().name;
}

=== SNIP ===
type Query {
  """
  A field which reads a derived context. Grats will invoke the above `getDb`
  function and pass it to this resolver function.
  """
  me: String
}
=== SNIP ===
import { GraphQLSchema, GraphQLObjectType, GraphQLString } from "graphql";
import { me as queryMeResolver, getDb } from "./04-derived-context.grats";
export function getSchema(): GraphQLSchema {
    const QueryType: GraphQLObjectType = new GraphQLObjectType({
        name: "Query",
        fields() {
            return {
                me: {
                    description: "A field which reads a derived context. Grats will invoke the above `getDb`\nfunction and pass it to this resolver function.",
                    name: "me",
                    type: GraphQLString,
                    resolve(_source, _args, context) {
                        return queryMeResolver(getDb(context));
                    }
                }
            };
        }
    });
    return new GraphQLSchema({
        query: QueryType,
        types: [QueryType]
    });
}
