{
  "typeName": "GratsConfig",
  "properties": {
    "graphqlSchema": {
      "description": "Where Grats should write your schema file. Path is relative to the `tsconfig.json` file.",
      "type": { "kind": "string" },
      "nullable": false,
      "default": "./schema.graphql"
    },
    "tsSchema": {
      "description": "Where Grats should write your executable TypeScript schema file. Path is relative to the `tsconfig.json` file.",
      "type": { "kind": "string" },
      "nullable": false,
      "default": "./schema.ts"
    },
    "nullableByDefault": {
      "description": "Should all fields be typed as nullable in accordance with GraphQL best practices? Individual fields can declare themselves as non-nullable by adding the docblock tag `@killsParentOnException`. See https://graphql.org/learn/best-practices/#nullability",
      "type": { "kind": "boolean" },
      "nullable": false,
      "default": true
    },
    "strictSemanticNullability": {
      "description": "Experimental feature to add `@semanticNonNull` to all fields which have non-null TypeScript return types, but which are made nullable by the `nullableByDefault` option. This feature allows clients which handle errors out of band, for example by discarding responses with errors, to know which fields are expected to be non-null in the absence of errors. See https://grats.capt.dev/docs/guides/strict-semantic-nullability. It is an error to enable `strictSemanticNullability` if `nullableByDefault` is false.",
      "type": { "kind": "boolean" },
      "nullable": false,
      "default": false
    },
    "reportTypeScriptTypeErrors": {
      "description": "Should Grats error if it encounters a TypeScript type error? Note that Grats will always error if it encounters a TypeScript syntax error.",
      "type": { "kind": "boolean" },
      "nullable": false,
      "default": false
    },
    "schemaHeader": {
      "description": "A string to prepend to the generated schema text. Useful for copyright headers or other information to the generated file. Set to `null` to omit the default header.",
      "type": { "kind": "longString" },
      "nullable": true,
      "default": "# Schema generated by Grats (https://grats.capt.dev)\n# Do not manually edit. Regenerate by running `npx grats`."
    },
    "tsSchemaHeader": {
      "description": "A string to prepend to the generated TypeScript schema file. Useful for copyright headers or other information to the generated file. Set to `null` to omit the default header.",
      "type": { "kind": "longString" },
      "nullable": true,
      "default": "/**\n * Executable schema generated by Grats (https://grats.capt.dev)\n * Do not manually edit. Regenerate by running `npx grats`.\n */"
    },
    "EXPERIMENTAL_tsEnumsHeader": {
      "description": "A string to prepend to the generated TypeScript enums file. Useful for copyright headers or other information to the generated file. Set to `null` to omit the default header.",
      "type": { "kind": "longString" },
      "nullable": true,
      "default": "/**\n * TypeScript enum definitions generated by Grats (https://grats.capt.dev)\n * Do not manually edit. Regenerate by running `npx grats`.\n */"
    },
    "importModuleSpecifierEnding": {
      "description": "This option allows you configure an extension that will be appended to the end of all import paths in the generated TypeScript schema file. When building a package that uses ES modules, import paths must not omit the file extension. In TypeScript code this generally means import paths must end with `.js`. If set to null, no ending will be appended.",
      "type": { "kind": "string" },
      "nullable": false,
      "default": ""
    },
    "EXPERIMENTAL__emitMetadata": {
      "description": "EXPERIMENTAL: Emit a JSON file alongside the generated schema file which contains the metadata containing information about the resolvers.",
      "type": { "kind": "boolean" },
      "nullable": false,
      "default": false,
      "experimental": true
    },
    "EXPERIMENTAL__emitResolverMap": {
      "description": "EXPERIMENTAL: Instead of emitting a TypeScript file which creates a GraphQLSchema, emit a TypeScript file which creates a GraphQL Tools style Resolver Map. https://the-guild.dev/graphql/tools/docs/resolvers#resolver-map",
      "type": { "kind": "boolean" },
      "nullable": false,
      "default": false,
      "experimental": true
    },
    "EXPERIMENTAL__emitEnums": {
      "description": "EXPERIMENTAL: Grats will write an additional modules file alongside the generated TypeScript schema file which exports all enum types for use in front-end code.",
      "type": { "kind": "string" },
      "nullable": true,
      "default": null,
      "experimental": true
    }
  }
}
