-----------------
INPUT
----------------- 
import { Int } from "../../../Types";

/** @gqlType */
export default class SomeType {
  /** @gqlField */
  age(): Int {
    return 10;
  }
}

-----------------
OUTPUT
-----------------
-- SDL --
type SomeType @exported(exportName: "SomeType", tsModulePath: "grats/src/tests/fixtures/built_in_scalars/IntField.ts") {
  age: Int @metadata(argCount: 0)
}
-- TypeScript --
import { SomeType as SomeTypeClass } from "./IntField";
import { GraphQLSchema, GraphQLObjectType, GraphQLInt } from "graphql";
export function getSchema(): GraphQLSchema {
    const SomeTypeType: GraphQLObjectType = new GraphQLObjectType({
        name: "SomeType",
        fields() {
            return {
                age: {
                    name: "age",
                    type: GraphQLInt
                }
            };
        }
    });
    return new GraphQLSchema({
        types: [SomeTypeType]
    });
}
const typeNameMap = new Map();
typeNameMap.set(SomeTypeClass, "SomeType");

function resolveType(obj: any): string {
  if (typeof obj.__typename === "string") {
    return obj.__typename;
  }

  let prototype = Object.getPrototypeOf(obj);
  while (prototype) {
    const name = typeNameMap.get(prototype.constructor);
    if (name != null) {
      return name;
    }
    prototype = Object.getPrototypeOf(prototype);
  }

  throw new Error("Cannot find type name");
}