-----------------
INPUT
----------------- 
/** @gqlType */
export default class SomeType {
  /** @gqlField greetz */
  hello(args: { greeting: string }): string {
    return `${args.greeting} world!`;
  }
}

-----------------
OUTPUT
-----------------
-- SDL --
type SomeType @exported(exportName: "SomeType", tsModulePath: "grats/src/tests/fixtures/field_definitions/RenamedFieldWithArgs.ts") {
  greetz(greeting: String!): String @metadata(argCount: 1, name: "hello")
}
-- TypeScript --
import { SomeType as SomeTypeClass } from "./RenamedFieldWithArgs";
import { GraphQLSchema, GraphQLObjectType, GraphQLString, GraphQLNonNull } from "graphql";
export function getSchema(): GraphQLSchema {
    const SomeTypeType: GraphQLObjectType = new GraphQLObjectType({
        name: "SomeType",
        fields() {
            return {
                greetz: {
                    name: "greetz",
                    type: GraphQLString,
                    args: {
                        greeting: {
                            name: "greeting",
                            type: new GraphQLNonNull(GraphQLString)
                        }
                    },
                    resolve(source, args, context, info) {
                        return source.hello(args, context, info);
                    }
                }
            };
        }
    });
    return new GraphQLSchema({
        types: [SomeTypeType]
    });
}
const typeNameMap = new Map();
typeNameMap.set(SomeTypeClass, "SomeType");

function resolveType(obj: any): string {
  if (typeof obj.__typename === "string") {
    return obj.__typename;
  }

  let prototype = Object.getPrototypeOf(obj);
  while (prototype) {
    const name = typeNameMap.get(prototype.constructor);
    if (name != null) {
      return name;
    }
    prototype = Object.getPrototypeOf(prototype);
  }

  throw new Error("Cannot find type name");
}