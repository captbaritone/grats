-----------------
INPUT
----------------- 
/** @gqlType */
export default class SomeType {
  /**
   * @gqlField
   * @deprecated Use something else.
   */
  hello(): string {
    return "Hello world!";
  }
}

-----------------
OUTPUT
-----------------
-- SDL --
type SomeType @exported(exportName: "SomeType", tsModulePath: "grats/src/tests/fixtures/field_definitions/DeprecatedMethodField.ts") {
  hello: String @deprecated(reason: "Use something else.") @metadata(argCount: 0)
}
-- TypeScript --
import { SomeType as SomeTypeClass } from "./DeprecatedMethodField";
import { GraphQLSchema, GraphQLObjectType, GraphQLString } from "graphql";
export function getSchema(): GraphQLSchema {
    const SomeTypeType: GraphQLObjectType = new GraphQLObjectType({
        name: "SomeType",
        fields() {
            return {
                hello: {
                    deprecationReason: "Use something else.",
                    name: "hello",
                    type: GraphQLString
                }
            };
        }
    });
    return new GraphQLSchema({
        types: [SomeTypeType]
    });
}
const typeNameMap = new Map();
typeNameMap.set(SomeTypeClass, "SomeType");

function resolveType(obj: any): string {
  if (typeof obj.__typename === "string") {
    return obj.__typename;
  }

  let prototype = Object.getPrototypeOf(obj);
  while (prototype) {
    const name = typeNameMap.get(prototype.constructor);
    if (name != null) {
      return name;
    }
    prototype = Object.getPrototypeOf(prototype);
  }

  throw new Error("Cannot find type name");
}