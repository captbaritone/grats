-----------------
INPUT
----------------- 
/** @gqlType */
class User {
  /**
   * @gqlField name
   * @deprecated
   */
  graphQLName(): string {
    return "Sup";
  }
}

-----------------
OUTPUT
-----------------
-- SDL --
type User {
  name: String @deprecated @metadata(argCount: 0, name: "graphQLName")
}
-- TypeScript --
import { GraphQLSchema, GraphQLObjectType, GraphQLString } from "graphql";
export function getSchema(): GraphQLSchema {
    const UserType: GraphQLObjectType = new GraphQLObjectType({
        name: "User",
        fields() {
            return {
                name: {
                    deprecationReason: "No longer supported",
                    name: "name",
                    type: GraphQLString,
                    resolve(source, args, context, info) {
                        return source.graphQLName(args, context, info);
                    }
                }
            };
        }
    });
    return new GraphQLSchema({
        types: [UserType]
    });
}
const typeNameMap = new Map();

function resolveType(obj: any): string {
  if (typeof obj.__typename === "string") {
    return obj.__typename;
  }

  let prototype = Object.getPrototypeOf(obj);
  while (prototype) {
    const name = typeNameMap.get(prototype.constructor);
    if (name != null) {
      return name;
    }
    prototype = Object.getPrototypeOf(prototype);
  }

  throw new Error("Cannot find type name");
}