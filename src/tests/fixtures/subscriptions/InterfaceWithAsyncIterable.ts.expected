-----------------
INPUT
----------------- 
/** @gqlInterface */
export interface NotSubscription {
  /** @gqlField */
  greetings(): AsyncIterable<string>;
}

-----------------
OUTPUT
-----------------
-- SDL --
interface NotSubscription {
  greetings: [String!] @metadata(argCount: 0)
}
-- TypeScript --
import { GraphQLSchema, GraphQLInterfaceType, GraphQLList, GraphQLNonNull, GraphQLString } from "graphql";
export function getSchema(): GraphQLSchema {
    const NotSubscriptionType: GraphQLInterfaceType = new GraphQLInterfaceType({
        name: "NotSubscription",
        fields() {
            return {
                greetings: {
                    name: "greetings",
                    type: new GraphQLList(new GraphQLNonNull(GraphQLString))
                }
            };
        },
        resolveType
    });
    return new GraphQLSchema({
        types: [NotSubscriptionType]
    });
}
const typeNameMap = new Map();

function resolveType(obj: any): string {
  if (typeof obj.__typename === "string") {
    return obj.__typename;
  }

  let prototype = Object.getPrototypeOf(obj);
  while (prototype) {
    const name = typeNameMap.get(prototype.constructor);
    if (name != null) {
      return name;
    }
    prototype = Object.getPrototypeOf(prototype);
  }

  throw new Error("Cannot find type name");
}