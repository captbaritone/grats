-----------------
INPUT
----------------- 
// { "nullableByDefault": false }
/** @gqlType */
export type Subscription = unknown;

/** @gqlField */
export async function* greetings(_: Subscription): AsyncIterable<string> {
  yield "Hello";
  yield "World";
}

/** @gqlField */
export async function* maybeGreetings(
  _: Subscription,
): AsyncIterable<string> | null {
  yield "Hello";
  yield "World";
}

/** @gqlField */
export async function* greetingsMaybe(
  _: Subscription,
): AsyncIterable<string | null> {
  yield "Hello";
  yield null;
  yield "World";
}

/** @gqlField */
export async function* maybeGreetingsMaybe(
  _: Subscription,
): AsyncIterable<string | null> | null {
  return null;
}

-----------------
OUTPUT
-----------------
-- SDL --
type Subscription {
  greetings: String! @resolver(kind: {function: {path: "grats/src/tests/fixtures/subscriptions/SubscriptionFunctionFieldWithAsyncIterable.ts", exportName: "greetings", arguments: [{source: true}]}})
  greetingsMaybe: String @resolver(kind: {function: {path: "grats/src/tests/fixtures/subscriptions/SubscriptionFunctionFieldWithAsyncIterable.ts", exportName: "greetingsMaybe", arguments: [{source: true}]}})
  maybeGreetings: String @resolver(kind: {function: {path: "grats/src/tests/fixtures/subscriptions/SubscriptionFunctionFieldWithAsyncIterable.ts", exportName: "maybeGreetings", arguments: [{source: true}]}})
  maybeGreetingsMaybe: String @resolver(kind: {function: {path: "grats/src/tests/fixtures/subscriptions/SubscriptionFunctionFieldWithAsyncIterable.ts", exportName: "maybeGreetingsMaybe", arguments: [{source: true}]}})
}
-- TypeScript --
import { greetings as subscriptionGreetingsResolver } from "./SubscriptionFunctionFieldWithAsyncIterable";
import { greetingsMaybe as subscriptionGreetingsMaybeResolver } from "./SubscriptionFunctionFieldWithAsyncIterable";
import { maybeGreetings as subscriptionMaybeGreetingsResolver } from "./SubscriptionFunctionFieldWithAsyncIterable";
import { maybeGreetingsMaybe as subscriptionMaybeGreetingsMaybeResolver } from "./SubscriptionFunctionFieldWithAsyncIterable";
import { GraphQLSchema, GraphQLObjectType, GraphQLNonNull, GraphQLString } from "graphql";
export function getSchema(): GraphQLSchema {
    const SubscriptionType: GraphQLObjectType = new GraphQLObjectType({
        name: "Subscription",
        fields() {
            return {
                greetings: {
                    name: "greetings",
                    type: new GraphQLNonNull(GraphQLString),
                    subscribe(source) {
                        return subscriptionGreetingsResolver(source);
                    },
                    resolve(payload) {
                        return payload;
                    }
                },
                greetingsMaybe: {
                    name: "greetingsMaybe",
                    type: GraphQLString,
                    subscribe(source) {
                        return subscriptionGreetingsMaybeResolver(source);
                    },
                    resolve(payload) {
                        return payload;
                    }
                },
                maybeGreetings: {
                    name: "maybeGreetings",
                    type: GraphQLString,
                    subscribe(source) {
                        return subscriptionMaybeGreetingsResolver(source);
                    },
                    resolve(payload) {
                        return payload;
                    }
                },
                maybeGreetingsMaybe: {
                    name: "maybeGreetingsMaybe",
                    type: GraphQLString,
                    subscribe(source) {
                        return subscriptionMaybeGreetingsMaybeResolver(source);
                    },
                    resolve(payload) {
                        return payload;
                    }
                }
            };
        }
    });
    return new GraphQLSchema({
        subscription: SubscriptionType,
        types: [SubscriptionType]
    });
}
