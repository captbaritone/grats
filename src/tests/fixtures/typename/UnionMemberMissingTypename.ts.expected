-----------------
INPUT
----------------- 
/** @gqlType */
export class User {
  /** @gqlField */
  name: string = "Alice";
}

/** @gqlType */
export class Group {
  /** @gqlField */
  name: string = "Alice Fan Club";
}

/** @gqlUnion */
export type MyUnion = User | Group;

-----------------
OUTPUT
-----------------
-- SDL --
union MyUnion = Group | User

type Group {
  name: String @metadata
}

type User {
  name: String @metadata
}
-- TypeScript --
import { Group as GroupClass } from "./UnionMemberMissingTypename";
import { User as UserClass } from "./UnionMemberMissingTypename";
import { GraphQLSchema, GraphQLUnionType, GraphQLObjectType, GraphQLString } from "graphql";
export function getSchema(): GraphQLSchema {
    const GroupType: GraphQLObjectType = new GraphQLObjectType({
        name: "Group",
        fields() {
            return {
                name: {
                    name: "name",
                    type: GraphQLString
                }
            };
        }
    });
    const UserType: GraphQLObjectType = new GraphQLObjectType({
        name: "User",
        fields() {
            return {
                name: {
                    name: "name",
                    type: GraphQLString
                }
            };
        }
    });
    const MyUnionType: GraphQLUnionType = new GraphQLUnionType({
        name: "MyUnion",
        types() {
            return [GroupType, UserType];
        }
    });
    return new GraphQLSchema({
        types: [MyUnionType, GroupType, UserType]
    });
}
