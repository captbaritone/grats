-----------------
INPUT
----------------- 
/** @gqlType */
export class User implements IPerson {
  /** @gqlField */
  name: string = "Alice";
}

/** @gqlInterface */
export interface IPerson {
  /** @gqlField */
  name: string;
}

-----------------
OUTPUT
-----------------
-- SDL --
interface IPerson {
  name: String @metadata
}

type User implements IPerson {
  name: String @metadata
}
-- TypeScript --
import { User as UserClass } from "./ImplementorMissingTypename";
import { GraphQLSchema, GraphQLInterfaceType, GraphQLString, GraphQLObjectType } from "graphql";
export function getSchema(): GraphQLSchema {
    const IPersonType: GraphQLInterfaceType = new GraphQLInterfaceType({
        name: "IPerson",
        fields() {
            return {
                name: {
                    name: "name",
                    type: GraphQLString
                }
            };
        }
    });
    const UserType: GraphQLObjectType = new GraphQLObjectType({
        name: "User",
        fields() {
            return {
                name: {
                    name: "name",
                    type: GraphQLString
                }
            };
        },
        interfaces() {
            return [IPersonType];
        }
    });
    return new GraphQLSchema({
        types: [IPersonType, UserType]
    });
}
