-----------------
INPUT
----------------- 
/** @gqlInput */
type Greeting = {
  name: string;
  salutation: string;
};

/** @gqlType */
export default class SomeType {
  /** @gqlField */
  hello(
    /** @deprecated Unused! */
    greeting: Greeting = { name: "Alice", salutation: "Hullo" },
  ): string {
    return `Hullo`;
  }
}

-----------------
OUTPUT
-----------------
-- SDL --
input Greeting {
  name: String!
  salutation: String!
}

type SomeType {
  hello(greeting: Greeting! = {name: "Alice", salutation: "Hullo"} @deprecated(reason: "Unused!")): String @metadata
}
-- TypeScript --
import { GraphQLSchema, GraphQLInputObjectType, GraphQLNonNull, GraphQLString, GraphQLObjectType } from "graphql";
export function getSchema(): GraphQLSchema {
    const GreetingType: GraphQLInputObjectType = new GraphQLInputObjectType({
        name: "Greeting",
        fields() {
            return {
                name: {
                    name: "name",
                    type: new GraphQLNonNull(GraphQLString)
                },
                salutation: {
                    name: "salutation",
                    type: new GraphQLNonNull(GraphQLString)
                }
            };
        }
    });
    const SomeTypeType: GraphQLObjectType = new GraphQLObjectType({
        name: "SomeType",
        fields() {
            return {
                hello: {
                    name: "hello",
                    type: GraphQLString,
                    args: {
                        greeting: {
                            deprecationReason: "Unused!",
                            name: "greeting",
                            type: new GraphQLNonNull(GreetingType),
                            defaultValue: {
                                name: "Alice",
                                salutation: "Hullo"
                            }
                        }
                    },
                    resolve(source, args) {
                        return source.hello(args.greeting);
                    }
                }
            };
        }
    });
    return new GraphQLSchema({
        types: [GreetingType, SomeTypeType]
    });
}
