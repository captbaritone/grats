-----------------
INPUT
----------------- 
/** @gqlType */
export default class SomeType {
  /** @gqlField */
  me(): User {
    return new User();
  }
}

/** @gqlInterface */
interface IPerson {
  /**
   * The person's name
   * @gqlField
   */
  name: string;
}

/** @gqlType */
class User implements IPerson {
  __typename = "User" as const;
  /**
   * The user's name
   * @gqlField
   */
  name: string;
}

-----------------
OUTPUT
-----------------
-- SDL --
interface IPerson {
  """The person's name"""
  name: String @metadata
}

type SomeType @exported(exportName: "SomeType", tsModulePath: "grats/src/tests/fixtures/interfaces/InterfaceFieldWithDescriptionThatDiffersFromType.ts") {
  me: User @metadata(argCount: 0)
}

type User implements IPerson {
  """The user's name"""
  name: String @metadata
}
-- TypeScript --
import { SomeType as SomeTypeClass } from "./InterfaceFieldWithDescriptionThatDiffersFromType";
import { GraphQLSchema, GraphQLInterfaceType, GraphQLString, GraphQLObjectType } from "graphql";
export function getSchema(): GraphQLSchema {
    const IPersonType: GraphQLInterfaceType = new GraphQLInterfaceType({
        name: "IPerson",
        fields() {
            return {
                name: {
                    description: "The person's name",
                    name: "name",
                    type: GraphQLString
                }
            };
        },
        resolveType
    });
    const UserType: GraphQLObjectType = new GraphQLObjectType({
        name: "User",
        fields() {
            return {
                name: {
                    description: "The user's name",
                    name: "name",
                    type: GraphQLString
                }
            };
        },
        interfaces() {
            return [IPersonType];
        }
    });
    const SomeTypeType: GraphQLObjectType = new GraphQLObjectType({
        name: "SomeType",
        fields() {
            return {
                me: {
                    name: "me",
                    type: UserType
                }
            };
        }
    });
    return new GraphQLSchema({
        types: [IPersonType, SomeTypeType, UserType]
    });
}
const typeNameMap = new Map();
typeNameMap.set(SomeTypeClass, "SomeType");

function resolveType(obj: any): string {
  if (typeof obj.__typename === "string") {
    return obj.__typename;
  }

  let prototype = Object.getPrototypeOf(obj);
  while (prototype) {
    const name = typeNameMap.get(prototype.constructor);
    if (name != null) {
      return name;
    }
    prototype = Object.getPrototypeOf(prototype);
  }

  throw new Error("Cannot find type name");
}