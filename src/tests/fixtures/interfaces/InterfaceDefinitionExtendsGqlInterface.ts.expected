-----------------
INPUT
----------------- 
import { Int } from "../../../Types";

/** @gqlInterface */
interface Mammal {
  /** @gqlField */
  legs: Int;
}

/** @gqlInterface */
export interface Person extends Mammal {
  /** @gqlField */
  name: string;

  /** @gqlField */
  legs: Int;
}

/** @gqlInterface */
export interface User extends Mammal, Person {
  __typename: "User";

  /** @gqlField */
  name: string;

  /** @gqlField */
  legs: Int;
}

-----------------
OUTPUT
-----------------
-- SDL --
interface Mammal {
  legs: Int @metadata
}

interface Person implements Mammal {
  legs: Int @metadata
  name: String @metadata
}

interface User implements Mammal & Person {
  legs: Int @metadata
  name: String @metadata
}
-- TypeScript --
import { GraphQLSchema, GraphQLInterfaceType, GraphQLInt, GraphQLString } from "graphql";
export function getSchema(): GraphQLSchema {
    const MammalType: GraphQLInterfaceType = new GraphQLInterfaceType({
        name: "Mammal",
        fields() {
            return {
                legs: {
                    name: "legs",
                    type: GraphQLInt
                }
            };
        },
        resolveType
    });
    const PersonType: GraphQLInterfaceType = new GraphQLInterfaceType({
        name: "Person",
        fields() {
            return {
                legs: {
                    name: "legs",
                    type: GraphQLInt
                },
                name: {
                    name: "name",
                    type: GraphQLString
                }
            };
        },
        interfaces() {
            return [MammalType];
        },
        resolveType
    });
    const UserType: GraphQLInterfaceType = new GraphQLInterfaceType({
        name: "User",
        fields() {
            return {
                legs: {
                    name: "legs",
                    type: GraphQLInt
                },
                name: {
                    name: "name",
                    type: GraphQLString
                }
            };
        },
        interfaces() {
            return [MammalType, PersonType];
        },
        resolveType
    });
    return new GraphQLSchema({
        types: [MammalType, PersonType, UserType]
    });
}
const typeNameMap = new Map();

function resolveType(obj: any): string {
  if (typeof obj.__typename === "string") {
    return obj.__typename;
  }

  let prototype = Object.getPrototypeOf(obj);
  while (prototype) {
    const name = typeNameMap.get(prototype.constructor);
    if (name != null) {
      return name;
    }
    prototype = Object.getPrototypeOf(prototype);
  }

  throw new Error("Cannot find type name");
}