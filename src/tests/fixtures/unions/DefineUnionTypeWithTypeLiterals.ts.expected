-----------------
INPUT
----------------- 
/** @gqlType */
export default class SomeType {
  /** @gqlField */
  me: Actor;
}

/** @gqlType */
type User = {
  __typename: "User";
  /** @gqlField */
  name: string;
};

/** @gqlType */
type Entity = {
  __typename: "Entity";
  /** @gqlField */
  description: string;
};

/** @gqlUnion */
type Actor = User | Entity;

-----------------
OUTPUT
-----------------
-- SDL --
union Actor = Entity | User

type Entity {
  description: String @metadata
}

type SomeType {
  me: Actor @metadata
}

type User {
  name: String @metadata
}
-- TypeScript --
import { GraphQLSchema, GraphQLUnionType, GraphQLObjectType, GraphQLString } from "graphql";
export function getSchema(): GraphQLSchema {
    const EntityType: GraphQLObjectType = new GraphQLObjectType({
        name: "Entity",
        fields() {
            return {
                description: {
                    name: "description",
                    type: GraphQLString
                }
            };
        }
    });
    const UserType: GraphQLObjectType = new GraphQLObjectType({
        name: "User",
        fields() {
            return {
                name: {
                    name: "name",
                    type: GraphQLString
                }
            };
        }
    });
    const ActorType: GraphQLUnionType = new GraphQLUnionType({
        name: "Actor",
        types() {
            return [EntityType, UserType];
        }
    });
    const SomeTypeType: GraphQLObjectType = new GraphQLObjectType({
        name: "SomeType",
        fields() {
            return {
                me: {
                    name: "me",
                    type: ActorType
                }
            };
        }
    });
    return new GraphQLSchema({
        types: [ActorType, EntityType, SomeTypeType, UserType]
    });
}
