-----------------
INPUT
----------------- 
import { Int } from "../../../Types";

/** @gqlType */
class User {
  /** @gqlField */
  name: string | null;
  /** @gqlField */
  greeting(
    greeting: string,
    otherName?: string | null,
    age?: Int | null,
  ): string {
    if (age != null && age < 12) {
      // Age appropriate greeting
      return `What's good ${this.name ?? otherName}!`;
    }
    return `${greeting}, ${this.name ?? otherName}!`;
  }
}

-----------------
OUTPUT
-----------------
-- SDL --
type User {
  greeting(age: Int, greeting: String!, otherName: String): String
  name: String
}
-- TypeScript --
import { GraphQLSchema, GraphQLObjectType, GraphQLString, GraphQLInt, GraphQLNonNull } from "graphql";
export function getSchema(): GraphQLSchema {
    const UserType: GraphQLObjectType = new GraphQLObjectType({
        name: "User",
        fields() {
            return {
                greeting: {
                    name: "greeting",
                    type: GraphQLString,
                    args: {
                        age: {
                            name: "age",
                            type: GraphQLInt
                        },
                        greeting: {
                            name: "greeting",
                            type: new GraphQLNonNull(GraphQLString)
                        },
                        otherName: {
                            name: "otherName",
                            type: GraphQLString
                        }
                    },
                    resolve(source, args) {
                        return source.greeting(args.greeting, args.otherName, args.age);
                    }
                },
                name: {
                    name: "name",
                    type: GraphQLString
                }
            };
        }
    });
    return new GraphQLSchema({
        types: [UserType]
    });
}
