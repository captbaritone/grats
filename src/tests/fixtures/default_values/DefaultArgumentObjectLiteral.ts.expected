-----------------
INPUT
----------------- 
import { Int } from "../../../Types";

/** @gqlType */
export default class SomeType {
  /** @gqlField */
  someField1({
    input = { first: 10, offset: 100 },
  }: {
    input?: ConnectionInput | null;
  }): string {
    return "hello";
  }
}

/** @gqlInput */
type ConnectionInput = {
  first: Int;
  offset: Int;
};

-----------------
OUTPUT
-----------------
-- SDL --
input ConnectionInput {
  first: Int!
  offset: Int!
}

type SomeType @exported(exportName: "SomeType", tsModulePath: "grats/src/tests/fixtures/default_values/DefaultArgumentObjectLiteral.ts") {
  someField1(input: ConnectionInput = {first: 10, offset: 100}): String @metadata(argCount: 1)
}
-- TypeScript --
import { SomeType as SomeTypeClass } from "./DefaultArgumentObjectLiteral";
import { GraphQLSchema, GraphQLInputObjectType, GraphQLNonNull, GraphQLInt, GraphQLObjectType, GraphQLString } from "graphql";
export function getSchema(): GraphQLSchema {
    const ConnectionInputType: GraphQLInputObjectType = new GraphQLInputObjectType({
        name: "ConnectionInput",
        fields() {
            return {
                first: {
                    name: "first",
                    type: new GraphQLNonNull(GraphQLInt)
                },
                offset: {
                    name: "offset",
                    type: new GraphQLNonNull(GraphQLInt)
                }
            };
        }
    });
    const SomeTypeType: GraphQLObjectType = new GraphQLObjectType({
        name: "SomeType",
        fields() {
            return {
                someField1: {
                    name: "someField1",
                    type: GraphQLString,
                    args: {
                        input: {
                            name: "input",
                            type: ConnectionInputType,
                            defaultValue: {
                                first: 10,
                                offset: 100
                            }
                        }
                    }
                }
            };
        }
    });
    return new GraphQLSchema({
        types: [ConnectionInputType, SomeTypeType]
    });
}
const typeNameMap = new Map();
typeNameMap.set(SomeTypeClass, "SomeType");

function resolveType(obj: any): string {
  if (typeof obj.__typename === "string") {
    return obj.__typename;
  }

  let prototype = Object.getPrototypeOf(obj);
  while (prototype) {
    const name = typeNameMap.get(prototype.constructor);
    if (name != null) {
      return name;
    }
    prototype = Object.getPrototypeOf(prototype);
  }

  throw new Error("Cannot find type name");
}