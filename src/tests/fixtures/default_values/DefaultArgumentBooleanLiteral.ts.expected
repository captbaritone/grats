-----------------
INPUT
----------------- 
/** @gqlType */
export default class SomeType {
  /** @gqlField */
  someField1({ greet = false }: { greet?: boolean | null }): string {
    if (!greet) return "";
    return "hello";
  }

  /** @gqlField */
  someField2({ greet = true }: { greet?: boolean | null }): string {
    if (!greet) return "";
    return "hello";
  }
}

-----------------
OUTPUT
-----------------
-- SDL --
type SomeType @exported(exportName: "SomeType", tsModulePath: "grats/src/tests/fixtures/default_values/DefaultArgumentBooleanLiteral.ts") {
  someField1(greet: Boolean = false): String @metadata(argCount: 1)
  someField2(greet: Boolean = true): String @metadata(argCount: 1)
}
-- TypeScript --
import { SomeType as SomeTypeClass } from "./DefaultArgumentBooleanLiteral";
import { GraphQLSchema, GraphQLObjectType, GraphQLString, GraphQLBoolean } from "graphql";
export function getSchema(): GraphQLSchema {
    const SomeTypeType: GraphQLObjectType = new GraphQLObjectType({
        name: "SomeType",
        fields() {
            return {
                someField1: {
                    name: "someField1",
                    type: GraphQLString,
                    args: {
                        greet: {
                            name: "greet",
                            type: GraphQLBoolean,
                            defaultValue: false
                        }
                    }
                },
                someField2: {
                    name: "someField2",
                    type: GraphQLString,
                    args: {
                        greet: {
                            name: "greet",
                            type: GraphQLBoolean,
                            defaultValue: true
                        }
                    }
                }
            };
        }
    });
    return new GraphQLSchema({
        types: [SomeTypeType]
    });
}
const typeNameMap = new Map();
typeNameMap.set(SomeTypeClass, "SomeType");

function resolveType(obj: any): string {
  if (typeof obj.__typename === "string") {
    return obj.__typename;
  }

  let prototype = Object.getPrototypeOf(obj);
  while (prototype) {
    const name = typeNameMap.get(prototype.constructor);
    if (name != null) {
      return name;
    }
    prototype = Object.getPrototypeOf(prototype);
  }

  throw new Error("Cannot find type name");
}