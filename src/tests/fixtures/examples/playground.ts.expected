-----------------
INPUT
----------------- 
/** @gqlType */
export default class SomeType {
  /** @gqlField */
  me(): UserResolver {
    return new UserResolver();
  }
  /**
   * @gqlField
   * @deprecated Please use `me` instead.
   */
  viewer(): UserResolver {
    return new UserResolver();
  }
}

/**
 * A user in our kick-ass system!
 * @gqlType User
 */
class UserResolver {
  /** @gqlField */
  name: string = "Alice";

  /** @gqlField */
  greeting(args: { salutation: string }): string {
    return `${args.salutation}, ${this.name}`;
  }
}

/** @gqlField */
export function getUser(_: SomeType): UserResolver {
  return new UserResolver();
}

-----------------
OUTPUT
-----------------
-- SDL --
type SomeType {
  getUser: User @metadata(exportName: "getUser", tsModulePath: "grats/src/tests/fixtures/examples/playground.ts")
  me: User @metadata
  viewer: User @deprecated(reason: "Please use `me` instead.") @metadata
}

"""A user in our kick-ass system!"""
type User {
  greeting(salutation: String!): String @metadata
  name: String @metadata
}
-- TypeScript --
import { getUser as someTypeGetUserResolver } from "./playground";
import { GraphQLSchema, GraphQLObjectType, GraphQLString, GraphQLNonNull } from "graphql";
export function getSchema(): GraphQLSchema {
    const UserType: GraphQLObjectType = new GraphQLObjectType({
        name: "User",
        description: "A user in our kick-ass system!",
        fields() {
            return {
                greeting: {
                    name: "greeting",
                    type: GraphQLString,
                    args: {
                        salutation: {
                            name: "salutation",
                            type: new GraphQLNonNull(GraphQLString)
                        }
                    }
                },
                name: {
                    name: "name",
                    type: GraphQLString
                }
            };
        }
    });
    const SomeTypeType: GraphQLObjectType = new GraphQLObjectType({
        name: "SomeType",
        fields() {
            return {
                getUser: {
                    name: "getUser",
                    type: UserType,
                    resolve(source) {
                        return someTypeGetUserResolver(source);
                    }
                },
                me: {
                    name: "me",
                    type: UserType
                },
                viewer: {
                    deprecationReason: "Please use `me` instead.",
                    name: "viewer",
                    type: UserType
                }
            };
        }
    });
    return new GraphQLSchema({
        types: [SomeTypeType, UserType]
    });
}
