-----------------
INPUT
----------------- 
/**
 * @gqlScalar
 * @specifiedBy https://tools.ietf.org/html/rfc4122
 */
export type UUID = string;

-----------------
OUTPUT
-----------------
-- SDL --
scalar UUID @specifiedBy(url: "https://tools.ietf.org/html/rfc4122")
-- TypeScript --
import { GraphQLSchema, GraphQLScalarType } from "graphql";
export function getSchema(): GraphQLSchema {
    const UUIDType: GraphQLScalarType = new GraphQLScalarType({
        name: "UUID"
    });
    return new GraphQLSchema({
        types: [UUIDType]
    });
}
const typeNameMap = new Map();

function resolveType(obj: any): string {
  if (typeof obj.__typename === "string") {
    return obj.__typename;
  }

  let prototype = Object.getPrototypeOf(obj);
  while (prototype) {
    const name = typeNameMap.get(prototype.constructor);
    if (name != null) {
      return name;
    }
    prototype = Object.getPrototypeOf(prototype);
  }

  throw new Error("Cannot find type name");
}