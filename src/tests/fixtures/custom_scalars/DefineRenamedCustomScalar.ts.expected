-----------------
INPUT
----------------- 
/** @gqlType */
class SomeType {
  /** @gqlField */
  hello: string;
}

/** @gqlScalar CustomName */
export type MyUrl = string;

-----------------
OUTPUT
-----------------
-- SDL --
type SomeType {
  hello: String
}

scalar CustomName @exported(tsModulePath: "grats/src/tests/fixtures/custom_scalars/DefineRenamedCustomScalar.ts", functionName: "MyUrl", argCount: 0)
-- TypeScript --
import { MyUrl as CustomNameType } from "./DefineRenamedCustomScalar";
import { GraphQLScalarValueParser, GraphQLScalarLiteralParser, GraphQLSchema, GraphQLObjectType, GraphQLString, GraphQLScalarType, GraphQLScalarSerializer } from "graphql";
type ScalarConfigType<T> = {
    serialize(outputValue: T): any;
    parseValue: GraphQLScalarValueParser<T>;
    parseLiteral: GraphQLScalarLiteralParser<T>;
};
export type SchemaConfigType = {
    scalars: {
        CustomName: ScalarConfigType<CustomNameType>;
    };
};
export function getSchema(config: SchemaConfigType): GraphQLSchema {
    const SomeTypeType: GraphQLObjectType = new GraphQLObjectType({
        name: "SomeType",
        fields() {
            return {
                hello: {
                    name: "hello",
                    type: GraphQLString
                }
            };
        }
    });
    const CustomNameType: GraphQLScalarType = new GraphQLScalarType<CustomNameType>({
        name: "CustomName",
        serialize: config.scalars.CustomName.serialize as GraphQLScalarSerializer<CustomNameType>,
        parseValue: config.scalars.CustomName.parseValue,
        parseLiteral: config.scalars.CustomName.parseLiteral
    });
    return new GraphQLSchema({
        types: [SomeTypeType, CustomNameType]
    });
}
