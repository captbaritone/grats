-----------------
INPUT
----------------- 
/**
 *
 *
 *
 *
 *
 *
 *
 *
 *
 * Sup
 *
 *
 *
 *
 *
 *
 *
 *
 * @gqlType
 */
class SomeType {
  /** @gqlField */
  name: string;
}

-----------------
OUTPUT
-----------------
-- SDL --
"""Sup"""
type SomeType {
  name: String @metadata
}
-- TypeScript --
import { GraphQLSchema, GraphQLObjectType, GraphQLString } from "graphql";
export function getSchema(): GraphQLSchema {
    const SomeTypeType: GraphQLObjectType = new GraphQLObjectType({
        name: "SomeType",
        description: "Sup",
        fields() {
            return {
                name: {
                    name: "name",
                    type: GraphQLString
                }
            };
        }
    });
    return new GraphQLSchema({
        types: [SomeTypeType]
    });
}
const typeNameMap = new Map();

function resolveType(obj: any): string {
  if (typeof obj.__typename === "string") {
    return obj.__typename;
  }

  let prototype = Object.getPrototypeOf(obj);
  while (prototype) {
    const name = typeNameMap.get(prototype.constructor);
    if (name != null) {
      return name;
    }
    prototype = Object.getPrototypeOf(prototype);
  }

  throw new Error("Cannot find type name");
}