-----------------
INPUT
----------------- 
/** @gqlType */
class SomeType {
  // No fields
}

/** @gqlField */
export function greeting(_: SomeType, args: { name: string }): string {
  return `Hello ${args.name}!`;
}

-----------------
OUTPUT
-----------------
-- SDL --
type SomeType {
  greeting(name: String!): String @resolver(kind: {function: {path: "grats/src/tests/fixtures/extend_type/addFieldWithArguments.ts", exportName: "greeting", arguments: [{source: true}, {argumentsObject: true}]}})
}
-- TypeScript --
import { greeting as someTypeGreetingResolver } from "./addFieldWithArguments";
import { GraphQLSchema, GraphQLObjectType, GraphQLString, GraphQLNonNull } from "graphql";
export function getSchema(): GraphQLSchema {
    const SomeTypeType: GraphQLObjectType = new GraphQLObjectType({
        name: "SomeType",
        fields() {
            return {
                greeting: {
                    name: "greeting",
                    type: GraphQLString,
                    args: {
                        name: {
                            name: "name",
                            type: new GraphQLNonNull(GraphQLString)
                        }
                    },
                    resolve(source, args) {
                        return someTypeGreetingResolver(source, args);
                    }
                }
            };
        }
    });
    return new GraphQLSchema({
        types: [SomeTypeType]
    });
}
