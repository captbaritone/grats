-----------------
INPUT
----------------- 
/** @gqlType */
class SomeType {
  /** @gqlField */
  foo: string;
}

/** @gqlInterface */
interface IFoo {
  /** @gqlField */
  bar: string;
}

/** @gqlField */
export function greeting(iFoo: IFoo): string {
  return "Hello world!";
}

-----------------
OUTPUT
-----------------
-- SDL --
interface IFoo {
  bar: String @metadata
  greeting: String @metadata(argCount: 1, name: "greeting", tsModulePath: "grats/src/tests/fixtures/extend_type/interfaceFirstArgumentType.ts")
}

type SomeType {
  foo: String @metadata
}
-- TypeScript --
import { GraphQLSchema, GraphQLInterfaceType, GraphQLString, GraphQLObjectType } from "graphql";
export function getSchema(): GraphQLSchema {
    const IFooType: GraphQLInterfaceType = new GraphQLInterfaceType({
        name: "IFoo",
        fields() {
            return {
                bar: {
                    name: "bar",
                    type: GraphQLString
                },
                greeting: {
                    name: "greeting",
                    type: GraphQLString
                }
            };
        }
    });
    const SomeTypeType: GraphQLObjectType = new GraphQLObjectType({
        name: "SomeType",
        fields() {
            return {
                foo: {
                    name: "foo",
                    type: GraphQLString
                }
            };
        }
    });
    return new GraphQLSchema({
        types: [IFooType, SomeTypeType]
    });
}
