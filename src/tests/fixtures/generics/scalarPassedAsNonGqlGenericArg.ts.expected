-----------------
INPUT
----------------- 
/** @gqlType */
type Wrapper<T> = {
  /** @gqlField */
  value: string;
};

/** @gqlType */
type OtherType = {
  /** @gqlField */
  wrapper: Wrapper<string>;
};

-----------------
OUTPUT
-----------------
-- SDL --
type OtherType {
  wrapper: Wrapper @metadata
}

type Wrapper {
  value: String @metadata
}
-- TypeScript --
import { GraphQLSchema, GraphQLObjectType, GraphQLString } from "graphql";
export function getSchema(): GraphQLSchema {
    const WrapperType: GraphQLObjectType = new GraphQLObjectType({
        name: "Wrapper",
        fields() {
            return {
                value: {
                    name: "value",
                    type: GraphQLString
                }
            };
        }
    });
    const OtherTypeType: GraphQLObjectType = new GraphQLObjectType({
        name: "OtherType",
        fields() {
            return {
                wrapper: {
                    name: "wrapper",
                    type: WrapperType
                }
            };
        }
    });
    return new GraphQLSchema({
        types: [OtherTypeType, WrapperType]
    });
}
const typeNameMap = new Map();

function resolveType(obj: any): string {
  if (typeof obj.__typename === "string") {
    return obj.__typename;
  }

  let prototype = Object.getPrototypeOf(obj);
  while (prototype) {
    const name = typeNameMap.get(prototype.constructor);
    if (name != null) {
      return name;
    }
    prototype = Object.getPrototypeOf(prototype);
  }

  throw new Error("Cannot find type name");
}