-----------------
INPUT
----------------- 
// T is not inspected by Grats, so this is fine.
/** @gqlScalar */
type MyScalar<T> = T;

-----------------
OUTPUT
-----------------
-- SDL --
scalar MyScalar
-- TypeScript --
import { GraphQLSchema, GraphQLScalarType } from "graphql";
export function getSchema(): GraphQLSchema {
    const MyScalarType: GraphQLScalarType = new GraphQLScalarType({
        name: "MyScalar"
    });
    return new GraphQLSchema({
        types: [MyScalarType]
    });
}
const typeNameMap = new Map();

function resolveType(obj: any): string {
  if (typeof obj.__typename === "string") {
    return obj.__typename;
  }

  let prototype = Object.getPrototypeOf(obj);
  while (prototype) {
    const name = typeNameMap.get(prototype.constructor);
    if (name != null) {
      return name;
    }
    prototype = Object.getPrototypeOf(prototype);
  }

  throw new Error("Cannot find type name");
}