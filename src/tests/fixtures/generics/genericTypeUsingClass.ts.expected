-----------------
INPUT
----------------- 
/** @gqlType */
type Page = {
  /** @gqlField */
  name: string;
};

/** @gqlType */
export class Edge<T> {
  /** @gqlField */
  node: T;
  /** @gqlField */
  cursor: string;
}

/** @gqlType */
type Query = unknown;

/** @gqlField */
export function createEdge(_: Query): Edge<Page> {
  return { node: { name: "My Page" }, cursor: "cursor" };
}

-----------------
OUTPUT
-----------------
-- SDL --
type Page {
  name: String @metadata
}

type PageEdge @exported(exportName: "Edge", tsModulePath: "grats/src/tests/fixtures/generics/genericTypeUsingClass.ts") {
  cursor: String @metadata
  node: Page @metadata
}

type Query {
  createEdge: PageEdge @metadata(argCount: 1, exportName: "createEdge", tsModulePath: "grats/src/tests/fixtures/generics/genericTypeUsingClass.ts")
}
-- TypeScript --
import { Edge as PageEdgeClass } from "./genericTypeUsingClass";
import { createEdge as queryCreateEdgeResolver } from "./genericTypeUsingClass";
import { GraphQLSchema, GraphQLObjectType, GraphQLString } from "graphql";
export function getSchema(): GraphQLSchema {
    const PageType: GraphQLObjectType = new GraphQLObjectType({
        name: "Page",
        fields() {
            return {
                name: {
                    name: "name",
                    type: GraphQLString
                }
            };
        }
    });
    const PageEdgeType: GraphQLObjectType = new GraphQLObjectType({
        name: "PageEdge",
        fields() {
            return {
                cursor: {
                    name: "cursor",
                    type: GraphQLString
                },
                node: {
                    name: "node",
                    type: PageType
                }
            };
        }
    });
    const QueryType: GraphQLObjectType = new GraphQLObjectType({
        name: "Query",
        fields() {
            return {
                createEdge: {
                    name: "createEdge",
                    type: PageEdgeType,
                    resolve(source) {
                        return queryCreateEdgeResolver(source);
                    }
                }
            };
        }
    });
    return new GraphQLSchema({
        query: QueryType,
        types: [PageType, PageEdgeType, QueryType]
    });
}
const typeNameMap = new Map();
typeNameMap.set(PageEdgeClass, "PageEdge");

function resolveType(obj: any): string {
  if (typeof obj.__typename === "string") {
    return obj.__typename;
  }

  let prototype = Object.getPrototypeOf(obj);
  while (prototype) {
    const name = typeNameMap.get(prototype.constructor);
    if (name != null) {
      return name;
    }
    prototype = Object.getPrototypeOf(prototype);
  }

  throw new Error("Cannot find type name");
}