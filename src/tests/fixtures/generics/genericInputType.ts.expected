-----------------
INPUT
----------------- 
/** @gqlInput */
type SomeInput<T> = {
  someField: T;
};

/** @gqlInput */
type AnotherInput = {
  anotherField: string;
};

/** @gqlType */
class SomeClass {
  /** @gqlField */
  someField(args: { someArg: SomeInput<AnotherInput> }): string {
    return args.someArg.someField.anotherField;
  }
}

-----------------
OUTPUT
-----------------
-- SDL --
input AnotherInput {
  anotherField: String!
}

input AnotherInputSomeInput {
  someField: AnotherInput!
}

type SomeClass {
  someField(someArg: AnotherInputSomeInput!): String @metadata(argCount: 1)
}
-- TypeScript --
import { GraphQLSchema, GraphQLInputObjectType, GraphQLNonNull, GraphQLString, GraphQLObjectType } from "graphql";
export function getSchema(): GraphQLSchema {
    const AnotherInputType: GraphQLInputObjectType = new GraphQLInputObjectType({
        name: "AnotherInput",
        fields() {
            return {
                anotherField: {
                    name: "anotherField",
                    type: new GraphQLNonNull(GraphQLString)
                }
            };
        }
    });
    const AnotherInputSomeInputType: GraphQLInputObjectType = new GraphQLInputObjectType({
        name: "AnotherInputSomeInput",
        fields() {
            return {
                someField: {
                    name: "someField",
                    type: new GraphQLNonNull(AnotherInputType)
                }
            };
        }
    });
    const SomeClassType: GraphQLObjectType = new GraphQLObjectType({
        name: "SomeClass",
        fields() {
            return {
                someField: {
                    name: "someField",
                    type: GraphQLString,
                    args: {
                        someArg: {
                            name: "someArg",
                            type: new GraphQLNonNull(AnotherInputSomeInputType)
                        }
                    }
                }
            };
        }
    });
    return new GraphQLSchema({
        types: [AnotherInputType, AnotherInputSomeInputType, SomeClassType]
    });
}
const typeNameMap = new Map();

function resolveType(obj: any): string {
  if (typeof obj.__typename === "string") {
    return obj.__typename;
  }

  let prototype = Object.getPrototypeOf(obj);
  while (prototype) {
    const name = typeNameMap.get(prototype.constructor);
    if (name != null) {
      return name;
    }
    prototype = Object.getPrototypeOf(prototype);
  }

  throw new Error("Cannot find type name");
}