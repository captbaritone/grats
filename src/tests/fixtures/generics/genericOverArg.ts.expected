-----------------
INPUT
----------------- 
/** @gqlType */
export class SomeClass<T> {
  /** @gqlField */
  someField(args: { someArg?: T | null }): string {
    return "someField";
  }
}

/** @gqlInput */
type SomeInput = {
  someField: string;
};

/** @gqlType */
type Query = unknown;

/** @gqlField */
export function someField(_: Query): SomeClass<SomeInput> {
  return new SomeClass();
}

-----------------
OUTPUT
-----------------
-- SDL --
input SomeInput {
  someField: String!
}

type Query {
  someField: SomeInputSomeClass @metadata(argCount: 1, exportName: "someField", tsModulePath: "grats/src/tests/fixtures/generics/genericOverArg.ts")
}

type SomeInputSomeClass @exported(exportName: "SomeClass", tsModulePath: "grats/src/tests/fixtures/generics/genericOverArg.ts") {
  someField(someArg: SomeInput): String @metadata(argCount: 1)
}
-- TypeScript --
import { SomeClass as SomeInputSomeClassClass } from "./genericOverArg";
import { someField as querySomeFieldResolver } from "./genericOverArg";
import { GraphQLSchema, GraphQLObjectType, GraphQLString, GraphQLInputObjectType, GraphQLNonNull } from "graphql";
export function getSchema(): GraphQLSchema {
    const SomeInputType: GraphQLInputObjectType = new GraphQLInputObjectType({
        name: "SomeInput",
        fields() {
            return {
                someField: {
                    name: "someField",
                    type: new GraphQLNonNull(GraphQLString)
                }
            };
        }
    });
    const SomeInputSomeClassType: GraphQLObjectType = new GraphQLObjectType({
        name: "SomeInputSomeClass",
        fields() {
            return {
                someField: {
                    name: "someField",
                    type: GraphQLString,
                    args: {
                        someArg: {
                            name: "someArg",
                            type: SomeInputType
                        }
                    }
                }
            };
        }
    });
    const QueryType: GraphQLObjectType = new GraphQLObjectType({
        name: "Query",
        fields() {
            return {
                someField: {
                    name: "someField",
                    type: SomeInputSomeClassType,
                    resolve(source) {
                        return querySomeFieldResolver(source);
                    }
                }
            };
        }
    });
    return new GraphQLSchema({
        query: QueryType,
        types: [SomeInputType, QueryType, SomeInputSomeClassType]
    });
}
const typeNameMap = new Map();
typeNameMap.set(SomeInputSomeClassClass, "SomeInputSomeClass");

function resolveType(obj: any): string {
  if (typeof obj.__typename === "string") {
    return obj.__typename;
  }

  let prototype = Object.getPrototypeOf(obj);
  while (prototype) {
    const name = typeNameMap.get(prototype.constructor);
    if (name != null) {
      return name;
    }
    prototype = Object.getPrototypeOf(prototype);
  }

  throw new Error("Cannot find type name");
}