-----------------
INPUT
----------------- 
/** @gqlType */
type SomeType = {};

/** @gqlField */
export function me(_: SomeType): User {
  return { firstName: "John", lastName: "Doe" };
}

/** @gqlType */
type User = {
  /** @gqlField */
  firstName: string;
  /** @gqlField */
  lastName: string;
};

/** @gqlField */
export function fullName(user: User): string {
  return `${user.firstName} ${user.lastName}`;
}

-----------------
OUTPUT
-----------------
-- SDL --
type SomeType {
  me: User @metadata(exportName: "me", tsModulePath: "grats/src/tests/fixtures/todo/userExample.ts")
}

type User {
  firstName: String @metadata
  fullName: String @metadata(exportName: "fullName", tsModulePath: "grats/src/tests/fixtures/todo/userExample.ts")
  lastName: String @metadata
}
-- TypeScript --
import { fullName as userFullNameResolver } from "./userExample";
import { me as someTypeMeResolver } from "./userExample";
import { GraphQLSchema, GraphQLObjectType, GraphQLString } from "graphql";
export function getSchema(): GraphQLSchema {
    const UserType: GraphQLObjectType = new GraphQLObjectType({
        name: "User",
        fields() {
            return {
                firstName: {
                    name: "firstName",
                    type: GraphQLString
                },
                fullName: {
                    name: "fullName",
                    type: GraphQLString,
                    resolve(source) {
                        return userFullNameResolver(source);
                    }
                },
                lastName: {
                    name: "lastName",
                    type: GraphQLString
                }
            };
        }
    });
    const SomeTypeType: GraphQLObjectType = new GraphQLObjectType({
        name: "SomeType",
        fields() {
            return {
                me: {
                    name: "me",
                    type: UserType,
                    resolve(source) {
                        return someTypeMeResolver(source);
                    }
                }
            };
        }
    });
    return new GraphQLSchema({
        types: [SomeTypeType, UserType]
    });
}
