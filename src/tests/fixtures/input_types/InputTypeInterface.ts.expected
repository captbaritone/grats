-----------------
INPUT
----------------- 
/** @gqlInput */
interface MyInputType {
  someField: string;
}

/** @gqlType */
class User {
  /** @gqlField */
  myField(args: { input: MyInputType }): string {
    return args.input.someField;
  }
}

-----------------
OUTPUT
-----------------
-- SDL --
input MyInputType {
  someField: String!
}

type User {
  myField(input: MyInputType!): String @metadata(argCount: 1)
}
-- TypeScript --
import { GraphQLSchema, GraphQLInputObjectType, GraphQLNonNull, GraphQLString, GraphQLObjectType } from "graphql";
export function getSchema(): GraphQLSchema {
    const MyInputTypeType: GraphQLInputObjectType = new GraphQLInputObjectType({
        name: "MyInputType",
        fields() {
            return {
                someField: {
                    name: "someField",
                    type: new GraphQLNonNull(GraphQLString)
                }
            };
        }
    });
    const UserType: GraphQLObjectType = new GraphQLObjectType({
        name: "User",
        fields() {
            return {
                myField: {
                    name: "myField",
                    type: GraphQLString,
                    args: {
                        input: {
                            name: "input",
                            type: new GraphQLNonNull(MyInputTypeType)
                        }
                    }
                }
            };
        }
    });
    return new GraphQLSchema({
        types: [MyInputTypeType, UserType]
    });
}
const typeNameMap = new Map();

function resolveType(obj: any): string {
  if (typeof obj.__typename === "string") {
    return obj.__typename;
  }

  let prototype = Object.getPrototypeOf(obj);
  while (prototype) {
    const name = typeNameMap.get(prototype.constructor);
    if (name != null) {
      return name;
    }
    prototype = Object.getPrototypeOf(prototype);
  }

  throw new Error("Cannot find type name");
}