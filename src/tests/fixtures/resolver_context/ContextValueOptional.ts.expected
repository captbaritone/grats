-----------------
INPUT
----------------- 
/** @gqlType */
export class SomeType {
  /** @gqlField */
  greeting(ctx?: SomeOtherType): string {
    // This is fine since Grats will always pass ctx. It's fine for
    // the resolver to _also_ work _without_ ctx, as long as it's
    // safe for Grats to pass ctx.
    return ctx?.greeting ?? "Hello, World!";
  }
}

/** @gqlContext */
type SomeOtherType = { greeting: string };

-----------------
OUTPUT
-----------------
-- SDL --
type SomeType {
  greeting: String @metadata
}
-- TypeScript --
import { GraphQLSchema, GraphQLObjectType, GraphQLString } from "graphql";
export function getSchema(): GraphQLSchema {
    const SomeTypeType: GraphQLObjectType = new GraphQLObjectType({
        name: "SomeType",
        fields() {
            return {
                greeting: {
                    name: "greeting",
                    type: GraphQLString,
                    resolve(source, _args, context) {
                        return source.greeting(context);
                    }
                }
            };
        }
    });
    return new GraphQLSchema({
        types: [SomeTypeType]
    });
}
