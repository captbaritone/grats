-----------------
INPUT
----------------- 
type GratsContext = {
  greeting: string;
};

/** @gqlType */
export class User {}

/** @gqlField */
export function greeting(_: User, args: unknown, ctx: GratsContext): string {
  return ctx.greeting;
}

-----------------
OUTPUT
-----------------
-- SDL --
type User @exported(exportName: "User", tsModulePath: "grats/src/tests/fixtures/resolver_context/FunctionWithContextValue.ts") {
  greeting: String @metadata(argCount: 3, exportName: "greeting", tsModulePath: "grats/src/tests/fixtures/resolver_context/FunctionWithContextValue.ts")
}
-- TypeScript --
import { User as UserClass } from "./FunctionWithContextValue";
import { greeting as userGreetingResolver } from "./FunctionWithContextValue";
import { GraphQLSchema, GraphQLObjectType, GraphQLString } from "graphql";
export function getSchema(): GraphQLSchema {
    const UserType: GraphQLObjectType = new GraphQLObjectType({
        name: "User",
        fields() {
            return {
                greeting: {
                    name: "greeting",
                    type: GraphQLString,
                    resolve(source, args, context) {
                        return userGreetingResolver(source, args, context);
                    }
                }
            };
        }
    });
    return new GraphQLSchema({
        types: [UserType]
    });
}
const typeNameMap = new Map();
typeNameMap.set(UserClass, "User");

function resolveType(obj: any): string {
  if (typeof obj.__typename === "string") {
    return obj.__typename;
  }

  let prototype = Object.getPrototypeOf(obj);
  while (prototype) {
    const name = typeNameMap.get(prototype.constructor);
    if (name != null) {
      return name;
    }
    prototype = Object.getPrototypeOf(prototype);
  }

  throw new Error("Cannot find type name");
}