schema {
  query: Query
  mutation: Mutation
}

directive @exported(filename: String!, functionName: String!) on FIELD_DEFINITION

directive @methodName(name: String!) on FIELD_DEFINITION

type Group {
  id: String!
  members: [User!]!
  name: String!
}

interface IPerson {
  name: String!
}

type Mutation {
  addUser(userData: UserDataInput!): User! @exported(filename: "../../examples/express-graphql-http-functions/dist/Schema.js", functionName: "addUser")
  removeUser(id: String!): String! @exported(filename: "../../examples/express-graphql-http-functions/dist/Schema.js", functionName: "removeUser")
  updateUser(id: String!, userData: UserDataInput!): User! @exported(filename: "../../examples/express-graphql-http-functions/dist/Schema.js", functionName: "updateUser")
}

type Query {
  allUsers: [User!]! @exported(filename: "../../examples/express-graphql-http-functions/dist/Schema.js", functionName: "allUsers")
  me: User! @exported(filename: "../../examples/express-graphql-http-functions/dist/Schema.js", functionName: "me")
  person: IPerson! @exported(filename: "../../examples/express-graphql-http-functions/dist/Schema.js", functionName: "person")
  userById(id: String!): User! @exported(filename: "../../examples/express-graphql-http-functions/dist/Schema.js", functionName: "userById")
}

type User implements IPerson {
  groups: [Group!]!
  id: String!
  name: String!
}

input UserDataInput {
  groupIDs: [String!]
  name: String!
}