schema {
  query: Query
  mutation: Mutation
}

directive @exported(filename: String!, functionName: String!) on FIELD_DEFINITION

directive @methodName(name: String!) on FIELD_DEFINITION

interface IPerson {
  name: String!
}

type Mutation {
  users: UserMutations! @exported(filename: "../../examples/express-graphql-http-functions/Query.js", functionName: "usersMutations") @methodName(name: "usersMutations")
}

type Query {
  users: UserQueries! @exported(filename: "../../examples/express-graphql-http-functions/Query.js", functionName: "usersQueries") @methodName(name: "usersQueries")
}

type User implements IPerson {
  id: String!
  name: String!
}

input UserDataInput {
  name: String!
}

type UserMutations {
  add(userData: UserDataInput!): User! @exported(filename: "../../examples/express-graphql-http-functions/Query.js", functionName: "add")
  remove(id: String!): String! @exported(filename: "../../examples/express-graphql-http-functions/Query.js", functionName: "remove")
  update(id: String!, userData: UserDataInput!): User! @exported(filename: "../../examples/express-graphql-http-functions/Query.js", functionName: "update")
}

type UserQueries {
  byId(id: String!): User! @exported(filename: "../../examples/express-graphql-http-functions/Query.js", functionName: "byId")
  list: [User!]! @exported(filename: "../../examples/express-graphql-http-functions/Query.js", functionName: "list")
}