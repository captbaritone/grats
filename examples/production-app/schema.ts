/**
 * Executable schema generated by Grats (https://grats.capt.dev)
 * Do not manually edit. Regenerate by running `npx grats`.
 */
import { id as likeIdResolver } from "./graphql/Node";
import { nodes as likeConnectionNodesResolver } from "./models/LikeConnection";
import { createLike as mutationCreateLikeResolver } from "./models/Like";
import { createPost as mutationCreatePostResolver } from "./models/Post";
import { createUser as mutationCreateUserResolver } from "./models/User";
import { id as postIdResolver } from "./graphql/Node";
import { nodes as postConnectionNodesResolver } from "./models/PostConnection";
import { likes as queryLikesResolver } from "./models/LikeConnection";
import { node as queryNodeResolver } from "./graphql/Node";
import { nodes as queryNodesResolver } from "./graphql/Node";
import { posts as queryPostsResolver } from "./models/PostConnection";
import { users as queryUsersResolver } from "./models/UserConnection";
import { Viewer as queryViewerResolver } from "./models/Viewer";
import { postLikes as subscriptionPostLikesResolver } from "./models/LikeConnection";
import { id as userIdResolver } from "./graphql/Node";
import { nodes as userConnectionNodesResolver } from "./models/UserConnection";
import { IResolvers } from "@graphql-tools/utils";
export function getResolverMap(): IResolvers {
    return {
        Like: {
            id(source) {
                return likeIdResolver(source);
            }
        },
        LikeConnection: {
            nodes(source) {
                return likeConnectionNodesResolver(source);
            }
        },
        Mutation: {
            createLike(source, args, context) {
                return mutationCreateLikeResolver(source, args.input, context);
            },
            createPost(source, args, context) {
                return mutationCreatePostResolver(source, args.input, context);
            },
            createUser(source, args, context) {
                return mutationCreateUserResolver(source, args.input, context);
            }
        },
        Post: {
            id(source) {
                return postIdResolver(source);
            },
            likes(source, args, _context, info) {
                return source.likes(args, info);
            }
        },
        PostConnection: {
            nodes(source) {
                return postConnectionNodesResolver(source);
            }
        },
        Query: {
            likes(source, args, context, info) {
                return queryLikesResolver(source, args, context, info);
            },
            node(source, args, context) {
                return queryNodeResolver(source, args, context);
            },
            nodes(source, args, context) {
                return queryNodesResolver(source, args, context);
            },
            posts(source, args, context, info) {
                return queryPostsResolver(source, args, context, info);
            },
            users(source, args, context, info) {
                return queryUsersResolver(source, args, context, info);
            },
            viewer(source) {
                return queryViewerResolver.viewer(source);
            }
        },
        Subscription: {
            postLikes(source, args, context, info) {
                return subscriptionPostLikesResolver(source, args.postID, context, info);
            }
        },
        User: {
            id(source) {
                return userIdResolver(source);
            },
            posts(source, args, _context, info) {
                return source.posts(args, info);
            }
        },
        UserConnection: {
            nodes(source) {
                return userConnectionNodesResolver(source);
            }
        },
        Viewer: {
            feed(source, _args, context) {
                return source.feed(context);
            },
            user(source, _args, context) {
                return source.user(context);
            }
        }
    };
}
