# Schema generated by Grats (https://grats.capt.dev)
# Do not manually edit. Regenerate by running `npx grats`.
"""
A date and time. Serialized as a Unix timestamp.

**Note**: The `@specifiedBy` directive does not point to a real spec, but is
included here for demonstration purposes.
"""
scalar Date @specifiedBy(url: "https://example.com/html/spec-for-date-as-unix-timestamp")

"""Indicates a stable refetchable object in the system."""
interface Node {
  """
  A globally unique opaque identifier for a node. Can be used to fetch the the
  node with the `node` or `nodes` fields.
  
  See: https://graphql.org/learn/global-object-identification/
  """
  id: ID
}

input CreateLikeInput {
  postId: ID!
}

input CreatePostInput {
  authorId: ID!
  content: PostContentInput!
  title: String!
}

input CreateUserInput {
  name: String!
}

"""Models a node in a Markdown AST"""
input MarkdownNode @oneOf {
  blockquote: String
  h1: String
  h2: String
  h3: String
  li: [String!]
  p: String
  ul: [String!]
}

"""Post content. Could be pure text, or Markdown"""
input PostContentInput @oneOf {
  markdown: [MarkdownNode!]
  string: String
}

type CreateLikePayload {
  post: Post
}

type CreatePostPayload {
  post: Post
}

type CreateUserPayload {
  user: User
}

"""A reaction from a user indicating that they like a post."""
type Like implements Node {
  """The date and time at which the post was liked."""
  createdAt: Date
  """
  A globally unique opaque identifier for a node. Can be used to fetch the the
  node with the `node` or `nodes` fields.
  
  See: https://graphql.org/learn/global-object-identification/
  """
  id: ID
  """The user who liked the post."""
  liker: User
  """The post that was liked."""
  post: Post
}

type LikeConnection {
  """
  The total number of likes that post has received.
  **Note:** This is separate from the number of edges currently being read.
  """
  count: Int
  edges: [LikeEdge!]
  """Convenience field to get the nodes from a connection."""
  nodes: [Like!]
  pageInfo: PageInfo
}

type LikeEdge {
  cursor: String
  node: Like
}

type Mutation {
  """Like a post. This action is taken as the currently logged in user."""
  createLike(input: CreateLikeInput!): CreateLikePayload
  """Create a new post."""
  createPost(input: CreatePostInput!): CreatePostPayload
  """Create a new user."""
  createUser(input: CreateUserInput!): CreateUserPayload
}

type PageInfo {
  endCursor: String
  hasNextPage: Boolean
  hasPreviousPage: Boolean
  startCursor: String
}

"""A blog post."""
type Post implements Node {
  """The author of the post. This cannot change after the post is created."""
  author: User
  """Content of the post in markdown."""
  content: String
  """
  A globally unique opaque identifier for a node. Can be used to fetch the the
  node with the `node` or `nodes` fields.
  
  See: https://graphql.org/learn/global-object-identification/
  """
  id: ID
  """
  All the likes this post has received.
  **Note:** You can use this connection to access the number of likes.
  """
  likes(after: String, before: String, first: Int, last: Int): LikeConnection
  """The date and time at which the post was created."""
  publishedAt: Date
  """The editor-approved title of the post."""
  title: String
}

type PostConnection {
  edges: [PostEdge!]
  """Convenience field to get the nodes from a connection."""
  nodes: [Post!]
  pageInfo: PageInfo
}

type PostEdge {
  cursor: String
  node: Post
}

type Query {
  """All likes in the system. Note that there is no guarantee of order."""
  likes(after: String, before: String, first: Int, last: Int): LikeConnection
  """Fetch a single `Node` by its globally unique ID."""
  node(id: ID!): Node
  """Fetch a list of `Node`s by their globally unique IDs."""
  nodes(ids: [ID!]!): [Node]
  """All posts in the system. Note that there is no guarantee of order."""
  posts(after: String, before: String, first: Int, last: Int): PostConnection
  """All users in the system. Note that there is no guarantee of order."""
  users(after: String, before: String, first: Int, last: Int): UserConnection
  """The currently authenticated viewer."""
  viewer: Viewer
}

type Subscription {
  """
  Subscribe to likes on a post.
  **Note:** Does not immediately return likes, but rather updates as likes are applied.
  """
  postLikes(postID: String!): LikeConnection
}

type User implements Node {
  """
  A globally unique opaque identifier for a node. Can be used to fetch the the
  node with the `node` or `nodes` fields.
  
  See: https://graphql.org/learn/global-object-identification/
  """
  id: ID
  """User's name. **Note:** This field is not guaranteed to be unique."""
  name: String
  """
  All posts written by this user. Note that there is no guarantee of order.
  """
  posts(after: String, before: String, first: Int, last: Int): PostConnection
}

type UserConnection {
  edges: [UserEdge!]
  """Convenience field to get the nodes from a connection."""
  nodes: [User!]
  pageInfo: PageInfo
}

type UserEdge {
  cursor: String
  node: User
}

"""The currently authenticated viewer."""
type Viewer {
  """
  An "algorithmically generated" feed of posts.
  
  **Note:** Due to the extreme complexity of this algorithm, it can be slow.
  It is recommended to use `@stream` to avoid blocking the client.
  """
  feed: [Post!]
  """The currently authenticated user."""
  user: User
}
