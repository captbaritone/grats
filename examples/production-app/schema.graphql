# Schema generated by Grats (https://grats.capt.dev)
# Do not manually edit. Regenerate by running `npx grats`.
"""Describes the backing resolver for a field."""
directive @resolver(kind: ResolverKind!) on FIELD_DEFINITION

"""
A date and time. Serialized as a Unix timestamp.

**Note**: The `@specifiedBy` directive does not point to a real spec, but is
included here for demonstration purposes.
"""
scalar Date @specifiedBy(url: "https://example.com/html/spec-for-date-as-unix-timestamp")

"""Indicates a stable refetchable object in the system."""
interface Node {
  """
  A globally unique opaque identifier for a node. Can be used to fetch the the
  node with the `node` or `nodes` fields.
  
  See: https://graphql.org/learn/global-object-identification/
  """
  id: ID
}

input CreateLikeInput {
  postId: ID!
}

input CreatePostInput {
  authorId: ID!
  content: PostContentInput!
  title: String!
}

input CreateUserInput {
  name: String!
}

"""Describes a resolver that is defined as a function."""
input FunctionResolver {
  """
  An ordered list of positional arguments expected by the resolver method.
  """
  arguments: [ResolverArgument]
  """
  The name under which the function is exported. If this property is omitted, a default export is assumed.
  """
  exportName: String
  """
  The path of the module from which the function is exported.
  TODO: What should this be relative to?
  TODO: How do we support non-path imports, like imports from libraries?
  """
  path: String!
}

"""Models a node in a Markdown AST"""
input MarkdownNode @oneOf {
  blockquote: String
  h1: String
  h2: String
  h3: String
  li: [String!]
  p: String
  ul: [String!]
}

"""Describes a resolver that is defined as a method on the source object."""
input MethodResolver {
  """
  An ordered list of positional arguments expected by the resolver method.
  """
  arguments: [ResolverArgument]
  """
  The name of the method on the source object. If omitted the field name is used.
  """
  name: String
}

"""Post content. Could be pure text, or Markdown"""
input PostContentInput @oneOf {
  markdown: [MarkdownNode!]
  string: String
}

"""
Describes a resolver that is defined as a property or getter on the source object.
"""
input PropertyResolver {
  """
  The name of the property on the parent object. If omitted the field name is used.
  """
  name: String
}

"""
Describes a positional JavaScript argument expected by a resolver function or method.
"""
input ResolverArgument @oneOf {
  """
  An object map containing all the GraphQL arguments.
  This is what graphql-js resolvers expect in the second position.
  """
  argumentsObject: Boolean
  """
  The GraphQL execution context. This is what graphql-js resolvers expect in the third position.
  """
  context: Boolean
  """
  The GraphQL "info" object. This is what graphql-js resolvers expect in the fourth position.
  """
  information: Boolean
  """
  The single GraphQL argument with the given name. This allows resolvers to access individual arguments as positional arguments instead of always needing to access them as a single object map.
  """
  named: String
  """
  The source object. This is what graphql-js resolvers expect in the first position.
  """
  source: Boolean
}

"""Describes a resolver's implementation in one of several flavors."""
input ResolverKind @oneOf {
  """The resolver is function exported from a module."""
  function: FunctionResolver
  """The resolver is a method on the source object."""
  method: MethodResolver
  """The resolver is a simple property on the source object."""
  property: PropertyResolver
  """The resolver is static method on a class exported from a module."""
  staticMethod: StaticMethodResolver
}

"""Describes a resolver that is defined as a static method on a class."""
input StaticMethodResolver {
  """
  An ordered list of positional arguments expected by the resolver method.
  """
  arguments: [ResolverArgument]
  """
  The name under which the class is exported. If this property is omitted, a default export is assumed.
  """
  exportName: String
  """
  The name of the static method on the exported class which defines the resolver.
  """
  name: String!
  """
  The path of the module from which the class is exported.
  TODO: What should this be relative to?
  TODO: How do we support non-path imports, like imports from libraries?
  """
  path: String!
}

type CreateLikePayload {
  post: Post @resolver(kind: {property: {}})
}

type CreatePostPayload {
  post: Post @resolver(kind: {property: {}})
}

type CreateUserPayload {
  user: User @resolver(kind: {property: {}})
}

"""A reaction from a user indicating that they like a post."""
type Like implements Node {
  """The date and time at which the post was liked."""
  createdAt: Date @resolver(kind: {method: {arguments: []}})
  """
  A globally unique opaque identifier for a node. Can be used to fetch the the
  node with the `node` or `nodes` fields.
  
  See: https://graphql.org/learn/global-object-identification/
  """
  id: ID @resolver(kind: {function: {path: "examples/production-app/graphql/Node.ts", exportName: "id", arguments: [{source: true}]}})
  """The user who liked the post."""
  liker: User @resolver(kind: {method: {arguments: []}})
  """The post that was liked."""
  post: Post @resolver(kind: {method: {arguments: []}})
}

type LikeConnection {
  """
  The total number of likes that post has received.
  **Note:** This is separate from the number of edges currently being read.
  """
  count: Int @resolver(kind: {property: {}})
  edges: [LikeEdge!] @resolver(kind: {property: {}})
  """Convenience field to get the nodes from a connection."""
  nodes: [Like!] @resolver(kind: {function: {path: "examples/production-app/models/LikeConnection.ts", exportName: "nodes", arguments: [{source: true}]}})
  pageInfo: PageInfo @resolver(kind: {property: {}})
}

type LikeEdge {
  cursor: String @resolver(kind: {property: {}})
  node: Like @resolver(kind: {property: {}})
}

type Mutation {
  """Like a post. This action is taken as the currently logged in user."""
  createLike(input: CreateLikeInput!): CreateLikePayload @resolver(kind: {function: {path: "examples/production-app/models/Like.ts", exportName: "createLike", arguments: [{source: true}, {named: true}, {context: true}]}})
  """Create a new post."""
  createPost(input: CreatePostInput!): CreatePostPayload @resolver(kind: {function: {path: "examples/production-app/models/Post.ts", exportName: "createPost", arguments: [{source: true}, {named: true}, {context: true}]}})
  """Create a new user."""
  createUser(input: CreateUserInput!): CreateUserPayload @resolver(kind: {function: {path: "examples/production-app/models/User.ts", exportName: "createUser", arguments: [{source: true}, {named: true}, {context: true}]}})
}

type PageInfo {
  endCursor: String @resolver(kind: {property: {}})
  hasNextPage: Boolean @resolver(kind: {property: {}})
  hasPreviousPage: Boolean @resolver(kind: {property: {}})
  startCursor: String @resolver(kind: {property: {}})
}

"""A blog post."""
type Post implements Node {
  """The author of the post. This cannot change after the post is created."""
  author: User @resolver(kind: {method: {arguments: []}})
  """Content of the post in markdown."""
  content: String @resolver(kind: {method: {arguments: []}})
  """
  A globally unique opaque identifier for a node. Can be used to fetch the the
  node with the `node` or `nodes` fields.
  
  See: https://graphql.org/learn/global-object-identification/
  """
  id: ID @resolver(kind: {function: {path: "examples/production-app/graphql/Node.ts", exportName: "id", arguments: [{source: true}]}})
  """
  All the likes this post has received.
  **Note:** You can use this connection to access the number of likes.
  """
  likes(after: String, before: String, first: Int, last: Int): LikeConnection @resolver(kind: {method: {arguments: [{argumentsObject: true}, {information: true}]}})
  """The date and time at which the post was created."""
  publishedAt: Date @resolver(kind: {method: {arguments: []}})
  """The editor-approved title of the post."""
  title: String @resolver(kind: {method: {arguments: []}})
}

type PostConnection {
  edges: [PostEdge!] @resolver(kind: {property: {}})
  """Convenience field to get the nodes from a connection."""
  nodes: [Post!] @resolver(kind: {function: {path: "examples/production-app/models/PostConnection.ts", exportName: "nodes", arguments: [{source: true}]}})
  pageInfo: PageInfo @resolver(kind: {property: {}})
}

type PostEdge {
  cursor: String @resolver(kind: {property: {}})
  node: Post @resolver(kind: {property: {}})
}

type Query {
  """All likes in the system. Note that there is no guarantee of order."""
  likes(after: String, before: String, first: Int, last: Int): LikeConnection @resolver(kind: {function: {path: "examples/production-app/models/LikeConnection.ts", exportName: "likes", arguments: [{source: true}, {argumentsObject: true}, {context: true}, {information: true}]}})
  """Fetch a single `Node` by its globally unique ID."""
  node(id: ID!): Node @resolver(kind: {function: {path: "examples/production-app/graphql/Node.ts", exportName: "node", arguments: [{source: true}, {argumentsObject: true}, {context: true}]}})
  """Fetch a list of `Node`s by their globally unique IDs."""
  nodes(ids: [ID!]!): [Node] @resolver(kind: {function: {path: "examples/production-app/graphql/Node.ts", exportName: "nodes", arguments: [{source: true}, {argumentsObject: true}, {context: true}]}})
  """All posts in the system. Note that there is no guarantee of order."""
  posts(after: String, before: String, first: Int, last: Int): PostConnection @resolver(kind: {function: {path: "examples/production-app/models/PostConnection.ts", exportName: "posts", arguments: [{source: true}, {argumentsObject: true}, {context: true}, {information: true}]}})
  """All users in the system. Note that there is no guarantee of order."""
  users(after: String, before: String, first: Int, last: Int): UserConnection @resolver(kind: {function: {path: "examples/production-app/models/UserConnection.ts", exportName: "users", arguments: [{source: true}, {argumentsObject: true}, {context: true}, {information: true}]}})
  """The currently authenticated viewer."""
  viewer: Viewer @resolver(kind: {staticMethod: {path: "examples/production-app/models/Viewer.ts", name: "viewer", exportName: "Viewer", arguments: [{source: true}]}})
}

type Subscription {
  """
  Subscribe to likes on a post.
  **Note:** Does not immediately return likes, but rather updates as likes are applied.
  """
  postLikes(postID: String!): LikeConnection @resolver(kind: {function: {path: "examples/production-app/models/LikeConnection.ts", exportName: "postLikes", arguments: [{source: true}, {named: true}, {context: true}, {information: true}]}})
}

type User implements Node {
  """
  A globally unique opaque identifier for a node. Can be used to fetch the the
  node with the `node` or `nodes` fields.
  
  See: https://graphql.org/learn/global-object-identification/
  """
  id: ID @resolver(kind: {function: {path: "examples/production-app/graphql/Node.ts", exportName: "id", arguments: [{source: true}]}})
  """User's name. **Note:** This field is not guaranteed to be unique."""
  name: String @resolver(kind: {method: {arguments: []}})
  """
  All posts written by this user. Note that there is no guarantee of order.
  """
  posts(after: String, before: String, first: Int, last: Int): PostConnection @resolver(kind: {method: {arguments: [{argumentsObject: true}, {information: true}]}})
}

type UserConnection {
  edges: [UserEdge!] @resolver(kind: {property: {}})
  """Convenience field to get the nodes from a connection."""
  nodes: [User!] @resolver(kind: {function: {path: "examples/production-app/models/UserConnection.ts", exportName: "nodes", arguments: [{source: true}]}})
  pageInfo: PageInfo @resolver(kind: {property: {}})
}

type UserEdge {
  cursor: String @resolver(kind: {property: {}})
  node: User @resolver(kind: {property: {}})
}

"""The currently authenticated viewer."""
type Viewer {
  """
  An "algorithmically generated" feed of posts.
  
  **Note:** Due to the extreme complexity of this algorithm, it can be slow.
  It is recommended to use `@stream` to avoid blocking the client.
  """
  feed: [Post!] @resolver(kind: {method: {arguments: [{context: true}]}})
  """The currently authenticated user."""
  user: User @resolver(kind: {method: {arguments: [{context: true}]}})
}
