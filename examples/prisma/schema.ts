/**
 * Executable schema generated by Grats (https://grats.capt.dev)
 * Do not manually edit. Regenerate by running `npx grats`.
 */
import { posts as userPostsResolver } from "./models/User";
import { author as postAuthorResolver } from "./models/Post";
import { posts as queryPostsResolver } from "./models/Post";
import { users as queryUsersResolver } from "./models/User";
import { createPost as mutationCreatePostResolver } from "./models/Post";
import { GraphQLSchema, GraphQLObjectType, GraphQLList, GraphQLNonNull, GraphQLString, GraphQLInt, GraphQLInputObjectType } from "graphql";
export function getSchema(): GraphQLSchema {
    const UserType: GraphQLObjectType = new GraphQLObjectType({
        name: "User",
        fields() {
            return {
                email: {
                    name: "email",
                    type: GraphQLString
                },
                id: {
                    name: "id",
                    type: GraphQLInt
                },
                name: {
                    name: "name",
                    type: GraphQLString
                },
                posts: {
                    name: "posts",
                    type: new GraphQLList(new GraphQLNonNull(PostType)),
                    resolve(source, _args, context) {
                        return userPostsResolver(source, context);
                    }
                }
            };
        }
    });
    const PostType: GraphQLObjectType = new GraphQLObjectType({
        name: "Post",
        fields() {
            return {
                author: {
                    name: "author",
                    type: UserType,
                    resolve(source, _args, context) {
                        return postAuthorResolver(source, context);
                    }
                },
                content: {
                    name: "content",
                    type: GraphQLString
                },
                id: {
                    name: "id",
                    type: GraphQLInt
                },
                title: {
                    name: "title",
                    type: GraphQLString
                }
            };
        }
    });
    const QueryType: GraphQLObjectType = new GraphQLObjectType({
        name: "Query",
        fields() {
            return {
                posts: {
                    name: "posts",
                    type: new GraphQLList(new GraphQLNonNull(PostType)),
                    resolve(source, _args, context) {
                        return queryPostsResolver(source, context);
                    }
                },
                users: {
                    name: "users",
                    type: new GraphQLList(new GraphQLNonNull(UserType)),
                    resolve(source, _args, context) {
                        return queryUsersResolver(source, context);
                    }
                }
            };
        }
    });
    const CreatePostInputType: GraphQLInputObjectType = new GraphQLInputObjectType({
        name: "CreatePostInput",
        fields() {
            return {
                content: {
                    name: "content",
                    type: GraphQLString
                },
                title: {
                    name: "title",
                    type: new GraphQLNonNull(GraphQLString)
                }
            };
        }
    });
    const MutationType: GraphQLObjectType = new GraphQLObjectType({
        name: "Mutation",
        fields() {
            return {
                createPost: {
                    name: "createPost",
                    type: PostType,
                    args: {
                        input: {
                            name: "input",
                            type: new GraphQLNonNull(CreatePostInputType)
                        }
                    },
                    resolve(source, args, context) {
                        return mutationCreatePostResolver(source, args.input, context);
                    }
                }
            };
        }
    });
    return new GraphQLSchema({
        query: QueryType,
        mutation: MutationType,
        types: [CreatePostInputType, MutationType, PostType, QueryType, UserType]
    });
}
