/**
 * Executable schema generated by Grats (https://grats.capt.dev)
 * Do not manually edit. Regenerate by running `npx grats`.
 */

import { GraphQLSchema, GraphQLObjectType, GraphQLString, GraphQLInt, GraphQLList, GraphQLNonNull, GraphQLBoolean } from "graphql";
import { producers as filmProducersResolver, speciesConnection as filmSpeciesConnectionResolver } from "./types/Film.js";
export function getSchema(): GraphQLSchema {
    const SpeciesType: GraphQLObjectType = new GraphQLObjectType({
        name: "Species",
        fields() {
            return {
                name: {
                    name: "name",
                    type: GraphQLString
                }
            };
        }
    });
    const SpeciesEdgeType: GraphQLObjectType = new GraphQLObjectType({
        name: "SpeciesEdge",
        fields() {
            return {
                cursor: {
                    name: "cursor",
                    type: new GraphQLNonNull(GraphQLString)
                },
                node: {
                    name: "node",
                    type: SpeciesType
                }
            };
        }
    });
    const PageInfoType: GraphQLObjectType = new GraphQLObjectType({
        name: "PageInfo",
        description: "Information about pagination in a connection.",
        fields() {
            return {
                endCursor: {
                    description: "When paginating forwards, the cursor to continue.",
                    name: "endCursor",
                    type: GraphQLString
                },
                hasNextPage: {
                    description: "When paginating forwards, are there more items?",
                    name: "hasNextPage",
                    type: new GraphQLNonNull(GraphQLBoolean)
                },
                hasPreviousPage: {
                    description: "When paginating backwards, are there more items?",
                    name: "hasPreviousPage",
                    type: new GraphQLNonNull(GraphQLBoolean)
                },
                startCursor: {
                    description: "When paginating backwards, the cursor to continue.",
                    name: "startCursor",
                    type: GraphQLString
                }
            };
        }
    });
    const SpeciesConnectionType: GraphQLObjectType = new GraphQLObjectType({
        name: "SpeciesConnection",
        fields() {
            return {
                edges: {
                    name: "edges",
                    type: new GraphQLList(new GraphQLNonNull(SpeciesEdgeType))
                },
                nodes: {
                    name: "nodes",
                    type: new GraphQLList(new GraphQLNonNull(SpeciesType))
                },
                pageInfo: {
                    name: "pageInfo",
                    type: PageInfoType
                }
            };
        }
    });
    const FilmType: GraphQLObjectType = new GraphQLObjectType({
        name: "Film",
        description: "A single film.",
        fields() {
            return {
                director: {
                    description: "The name of the director of this film.",
                    name: "director",
                    type: GraphQLString
                },
                episodeID: {
                    description: "The episode number of this film.",
                    name: "episodeID",
                    type: GraphQLInt,
                    resolve(source) {
                        return source.episode_id;
                    }
                },
                producers: {
                    description: "The name(s) of the producer(s) of this film.",
                    name: "producers",
                    type: new GraphQLList(new GraphQLNonNull(GraphQLString)),
                    resolve(source) {
                        return filmProducersResolver(source);
                    }
                },
                releaseDate: {
                    description: "The ISO 8601 date format of film release at original creator country.",
                    name: "releaseDate",
                    type: GraphQLString,
                    resolve(source) {
                        return source.release_date;
                    }
                },
                speciesConnection: {
                    name: "speciesConnection",
                    type: SpeciesConnectionType,
                    args: {
                        after: {
                            type: GraphQLString
                        },
                        before: {
                            type: GraphQLString
                        },
                        first: {
                            type: GraphQLInt
                        },
                        last: {
                            type: GraphQLInt
                        }
                    },
                    resolve(source, args) {
                        return filmSpeciesConnectionResolver(source, args.after, args.first, args.before, args.last);
                    }
                },
                title: {
                    description: "The title of the film.",
                    name: "title",
                    type: GraphQLString
                }
            };
        }
    });
    const PersonType: GraphQLObjectType = new GraphQLObjectType({
        name: "Person",
        description: "An individual person or character within the Star Wars universe.",
        fields() {
            return {
                name: {
                    description: "The name of this person.",
                    name: "name",
                    type: GraphQLString
                }
            };
        }
    });
    return new GraphQLSchema({
        types: [FilmType, PageInfoType, PersonType, SpeciesType, SpeciesConnectionType, SpeciesEdgeType]
    });
}
